#!/bin/bash

set -e

env_file=.env.test
ssh_path=/home/docker/.ssh
pem_path=${ssh_path}/gerritbot_jira.pem
git_path=/usr/src/app/.git
ssh_key_path=${ssh_path}/ssh-key-SSH_KEY_PATH

dotenv () {
  set -a
  [ -f .env ] && . .env
  set +a
}

dotenv

function cleanup() {
  exit_code=$?
  set +e

  echo "Copying coverage reports..."
  docker cp $(docker-compose ps -q coverage):/usr/src/app/coverage .

  echo "Cleaning up..."
  docker-compose stop test
  docker-compose rm -f test
  docker rmi -f $(docker images -qf "dangling=true") &>/dev/null

  rm $env_file

  exit $exit_code
}

trap cleanup INT TERM EXIT

export COMPOSE_FILE=./docker-compose.test.yml

echo "Creating ${env_file} file..."
(
cat << EOF
CI=true
NPM_TOKEN=${NPM_TOKEN}
NPM_USERNAME=${NPM_USERNAME}
NPM_EMAIL=${NPM_EMAIL}
GIT_EMAIL=${GIT_EMAIL}
GIT_USERNAME=${GIT_USERNAME}
GIT_REMOTE_URL=${GIT_REMOTE_URL}
GIT_REMOTE_NAME=${GIT_REMOTE_NAME}
JIRA_CONSUMER_KEY=${JIRA_CONSUMER_KEY}
JIRA_TOKEN=${JIRA_TOKEN}
JIRA_SECRET=${JIRA_SECRET}
JIRA_PEM_PATH=${pem_path}
SLACK_USERNAME=${SLACK_USERNAME}
SLACK_WEBHOOK=${SLACK_WEBHOOK}
SSH_KEY_PATH=${ssh_key_path}
SSH_USERNAME=${SSH_USERNAME}
UV_THREADPOOL_SIZE=128
EOF
) > $env_file

echo "Pulling image..."
docker-compose pull

echo "Building services..."
docker-compose build

echo "Preparing container..."
container=$(docker-compose run -d --rm test tail -f /dev/null)

if [[ -e "${SSH_KEY_PATH}" ]]; then
  docker exec -u 0 $container mkdir $ssh_path
  docker exec -u 0 $container chown -R docker:docker $ssh_path
  docker cp "${SSH_KEY_PATH}" $container:$ssh_path
  docker exec -u 0 $container chown -R docker:docker $ssh_path
else
  echo "SSH_KEY_PATH env variable not set on post merge build"
  exit 1
fi

if [[ -e "${JIRA_PEM_PATH}" ]]; then
  docker cp "${JIRA_PEM_PATH}" $container:$pem_path
  docker exec -u 0 $container chown -R docker:docker $pem_path
fi

docker cp .git $container:$git_path
docker exec -u 0 $container chown -R docker:docker $git_path

echo "Running release..."
docker exec $container bash -c "ssh-keyscan -p 29418 gerrit.instructure.com >> ${ssh_path}/known_hosts"
docker exec $container bash -c "GIT_SSH_COMMAND='ssh -i ${ssh_key_path} -l ${SSH_USERNAME}' yarn release"

docker stop $container
