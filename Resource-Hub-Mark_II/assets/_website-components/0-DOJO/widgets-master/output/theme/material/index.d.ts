import * as accordionPane from './accordion.m.css';
import * as avatar from './avatar.m.css';
import * as breadcrumbGroup from './breadcrumb-group.m.css';
import * as button from './button.m.css';
import * as calendar from './calendar.m.css';
import * as card from './card.m.css';
import * as checkboxGroup from './checkbox-group.m.css';
import * as checkbox from './checkbox.m.css';
import * as chipTypeahead from './chip-typeahead.m.css';
import * as chip from './chip.m.css';
import * as dateInput from './date-input.m.css';
import * as dialog from './dialog.m.css';
import * as floatingActionButton from './floating-action-button.m.css';
import * as form from './form.m.css';
import * as gridBody from './grid-body.m.css';
import * as gridCell from './grid-cell.m.css';
import * as gridFooter from './grid-footer.m.css';
import * as gridHeader from './grid-header.m.css';
import * as gridPaginatedFooter from './grid-paginated-footer.m.css';
import * as gridPlaceholderRow from './grid-placeholder-row.m.css';
import * as gridRow from './grid-row.m.css';
import * as grid from './grid.m.css';
import * as headerCard from './header-card.m.css';
import * as header from './header.m.css';
import * as helperText from './helper-text.m.css';
import * as icon from './icon.m.css';
import * as label from './label.m.css';
import * as listItem from './list-item.m.css';
import * as list from './list.m.css';
import * as loadingIndicator from './loading-indicator.m.css';
import * as menuItem from './menu-item.m.css';
import * as nativeSelect from './native-select.m.css';
import * as outlinedButton from './outlined-button.m.css';
import * as pagination from './pagination.m.css';
import * as passwordInput from './password-input.m.css';
import * as popup from './popup.m.css';
import * as popupConfirmation from './popup-confirmation.m.css';
import * as progress from './progress.m.css';
import * as radioGroup from './radio-group.m.css';
import * as radio from './radio.m.css';
import * as raisedButton from './raised-button.m.css';
import * as rangeSlider from './range-slider.m.css';
import * as rate from './rate.m.css';
import * as result from './result.m.css';
import * as select from './select.m.css';
import * as slidePane from './slide-pane.m.css';
import * as slider from './slider.m.css';
import * as snackbar from './snackbar.m.css';
import * as speedDial from './speed-dial.m.css';
import * as wizard from './wizard.m.css';
import * as switchControl from './switch.m.css';
import * as tabContainer from './tab-container.m.css';
import * as textArea from './text-area.m.css';
import * as textInput from './text-input.m.css';
import * as threeColumnLayout from './three-column-layout.m.css';
import * as timePicker from './time-picker.m.css';
import * as titlePane from './title-pane.m.css';
import * as tooltip from './tooltip.m.css';
import * as tree from './tree.m.css';
import * as twoColumnLayout from './two-column-layout.m.css';
import * as typeahead from './typeahead.m.css';
import * as defaultVariant from './variants/default.m.css';
import * as darkVariant from './variants/dark.m.css';
declare const _default: {
	theme: {
		'@dojo/widgets/accordion': typeof accordionPane;
		'@dojo/widgets/avatar': typeof avatar;
		'@dojo/widgets/breadcrumb-group': typeof breadcrumbGroup;
		'@dojo/widgets/button': typeof button;
		'@dojo/widgets/calendar': typeof calendar;
		'@dojo/widgets/checkbox-group': typeof checkboxGroup;
		'@dojo/widgets/checkbox': typeof checkbox;
		'@dojo/widgets/card': typeof card;
		'@dojo/widgets/chip': typeof chip;
		'@dojo/widgets/date-input': typeof dateInput;
		'@dojo/widgets/dialog': typeof dialog;
		'@dojo/widgets/floating-action-button': typeof floatingActionButton;
		'@dojo/widgets/form': typeof form;
		'@dojo/widgets/grid-body': typeof gridBody;
		'@dojo/widgets/grid-cell': typeof gridCell;
		'@dojo/widgets/grid-footer': typeof gridFooter;
		'@dojo/widgets/grid-header': typeof gridHeader;
		'@dojo/widgets/grid-paginated-footer': typeof gridPaginatedFooter;
		'@dojo/widgets/grid-placeholder-row': typeof gridPlaceholderRow;
		'@dojo/widgets/grid-row': typeof gridRow;
		'@dojo/widgets/grid': typeof grid;
		'@dojo/widgets/header-card': typeof headerCard;
		'@dojo/widgets/header': typeof header;
		'@dojo/widgets/helper-text': typeof helperText;
		'@dojo/widgets/icon': typeof icon;
		'@dojo/widgets/label': typeof label;
		'@dojo/widgets/list-item': typeof listItem;
		'@dojo/widgets/loading-indicator': typeof loadingIndicator;
		'@dojo/widgets/list': typeof list;
		'@dojo/widgets/menu-item': typeof menuItem;
		'@dojo/widgets/chip-typeahead': typeof chipTypeahead;
		'@dojo/widgets/native-select': typeof nativeSelect;
		'@dojo/widgets/outlined-button': typeof outlinedButton;
		'@dojo/widgets/pagination': typeof pagination;
		'@dojo/widgets/password-input': typeof passwordInput;
		'@dojo/widgets/popup-confirmation': typeof popupConfirmation;
		'@dojo/widgets/progress': typeof progress;
		'@dojo/widgets/popup': typeof popup;
		'@dojo/widgets/radio-group': typeof radioGroup;
		'@dojo/widgets/radio': typeof radio;
		'@dojo/widgets/raised-button': typeof raisedButton;
		'@dojo/widgets/range-slider': typeof rangeSlider;
		'@dojo/widgets/rate': typeof rate;
		'@dojo/widgets/result': typeof result;
		'@dojo/widgets/select': typeof select;
		'@dojo/widgets/slide-pane': typeof slidePane;
		'@dojo/widgets/slider': typeof slider;
		'@dojo/widgets/snackbar': typeof snackbar;
		'@dojo/widgets/speed-dial': typeof speedDial;
		'@dojo/widgets/wizard': typeof wizard;
		'@dojo/widgets/switch': typeof switchControl;
		'@dojo/widgets/tab-container': typeof tabContainer;
		'@dojo/widgets/text-area': typeof textArea;
		'@dojo/widgets/text-input': typeof textInput;
		'@dojo/widgets/three-column-layout': typeof threeColumnLayout;
		'@dojo/widgets/time-picker': typeof timePicker;
		'@dojo/widgets/title-pane': typeof titlePane;
		'@dojo/widgets/tooltip': typeof tooltip;
		'@dojo/widgets/tree': typeof tree;
		'@dojo/widgets/two-column-layout': typeof twoColumnLayout;
		'@dojo/widgets/typeahead': typeof typeahead;
	};
	variants: {
		default: typeof defaultVariant;
		light: typeof defaultVariant;
		dark: typeof darkVariant;
	};
};
export default _default;
