[00:00:00]
>> Now we briefly touched about virtual environments. They are an important way of storing the dependencies that your Python application requires. Creating that virtual environment will make a self-contained folder that includes that full Python installation. And it's going to allow you to install dependencies that are specific to that application.

[00:00:22]
And a specific version of Python without the possibility of messing up your global version of Python might not be the same version. You're not gonna have the same libraries that you're using between different projects, which is why isolating in a virtual environment is very important. You might see this shortened as virtual and for short, a standard that you might see is a requirements.txt file that's included with a Python project.

[00:00:54]
It's a special file that we're gonna use to tell pip just Python's package manager command line tool which dependencies to install for this particular package. The format is simple, you just put each dependency manually on one line in this file. If you need to specify a specific version, you can do double equals and put the version after the name of the library.

[00:01:23]
Or you can just install each dependency in your virtual environment using pip directly. Once you've done that, probably as you're building the application, you can see which packages are present in your virtual environment with a command called pip freeze. You can pipe that into a requirements.txt file to generate that for you automatically.

[00:01:48]
Unfortunately, that also includes a lot of the sub dependencies. So I prefer if I'm working on a simple project to manage these requirements.txt files manually, but that's not important. If you get a project with a requirements.txt file, you can do a pip install-r in your virtual environment to install all of the dependencies specified in this file.

