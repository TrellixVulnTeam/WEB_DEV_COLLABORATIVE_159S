[00:00:00]
>> Technologies you need to know that to get a job, right? So these are technologies as an entry level developer that are going to put you above the other devs or at least help pick the interest when they see this on your resumes and see this on your content that you're making.

[00:00:19]
It's gonna help you get the attention of people that are looking to hire you. So you need a strong understanding of the Big Three. Everybody that says they know HTML, CSS and JavaScript, knowing how to write it and knowing the why behind writing it, and how to write it, while you're writing it, is a big difference.

[00:00:43]
When it comes to HTML, you need to understand Semantic Web and SEO. You need to understand about HTML validators. You need to understand why it's so important to write a Semantic HTML, because doing Semantic HTML helps web crawlers know which information is most important, which helps websites SEO, which also helps with accessibility.

[00:01:04]
Which makes it easier for the web users, you'd be amazed how many people write really bad HTML, they dev all the things, then they force it to do their bidding with CSS. And then especially in past two years, the website gets hit with a huge lawsuit for web accessibility, because everything was done wrong or weird.

[00:01:25]
You need to understand that and be able to have those that use cases, the why you do it a certain way. CSS, knowing CSS, just to change colors is great. You also need to learn how to do animation, a little bit of animation. Not a lot like text transform, style transformations, things of that nature.

[00:01:44]
You'll have a deep dive on it for you to be able to understand it as well as make sure you understand grid and flex, front end masters has several great courses on that. And understanding the why, for instance, I was a big fan of grid when it came to larger sites.

[00:02:02]
But that was when I had a more monolithic thought process of building websites. Once it came to more modular, I focus on more smaller components of building websites, that's when I started making my products more focused on flex because it gave me more control of what I was doing.

[00:02:24]
Now if I'm using something that has a lot of data that has to manipulate and move around as we're going from desktop to mobile or mobile desktop, as we're like switching between those devices, then yes, I will use grid, if you had a table with a lot of data points, and rows, and all that stuff, right?

[00:02:47]
That's when I will use grid. But for everything else, I use flex. I also recently learned that grid is slower than flex, which helped influence me to make more decisions, to say if I can try using flex, I will. So these are the type of conversations and ideals that you need, when you're building things, and when you're interviewing, so that way you can have these type of conversations, so you can lead with influence.

[00:03:18]
So they're like, you've played with it enough, you work with it enough to understand the gotchas, the sacrifices that you have to make based upon technology. JavaScript, same way, you need to understand that most especially as an entry level dev, most of the websites that you're going to be on that you're gonna be working on.

[00:03:39]
It's gonna have some older writing styles with them and be using jQuery. So you need to learn a not just JavaScript, but a little bit of how to transform jQuery into JavaScript. So there's a great website. I should put it in here. I'll put in my notes for later.

[00:03:59]
It's called you You don't need jQuery and they actually walk through how to use a DOM selector in lieu of jQuery to like do things I highly recommend it. It was a fun site, one of my friends, Adam Dylan, he showed it to me. He's a great example if you're on Twitter of a person to follow who's strong in the front end game, comes from a graphic design background and learn front end on his own, just because he loves building a product.

[00:04:29]
So that's a great tool.
>> How rock solid do you have to be on the HTML, the CSS, and then we'll leave JavaScript to another question? But do you need to be able to whip up a page without even thinking or you just got to know. Obviously, everybody can write it, but can you if you're given a design, can you pound that design out in 20 minutes without even thinking just by looking at it?

[00:05:07]

>> I have yet to see a 20-minute interview challenge with HTML CSS. I've seen like there's some competitions that do that. But this is a job, this is a profession so you have to be pretty solid on the fundamentals as well be able to share. This is where how I find the fundamentals, being able to show that you're a great communicator.

[00:05:32]
Well, if you don't know something or saying how you would find it, that takes you make suggest as well when it comes to looking for being solid and these problems or any issues. So you have to be able to you have to be solid but you also have to be able to communicate if what you don't know.

[00:05:54]
And be open about and say how you would find out I just say, I don't know, and I'll find out like, okay, I don't know this. So my first thing I would do is go to the MDN, I would search this on the Mozilla MDN and see this now if it's still like, I'm still having an issue with growing it.

[00:06:10]
What I would do is I would go to CSS tricks and read a blog post about it cuz I know CSS tricks probably has something written on it, or I would go the front end masters and try to do a video on it, try to see if there's any coursework on it and go through that before I attempt to tackle this again.

[00:06:28]
Cuz you get a deeper dive, right. So that's what you would do, you would talk through them and you might find your solution based upon that. They ask you about, how do you center? How do you center a div or center square without using float, right? So you're like, okay, I know I can do display flex.

[00:06:50]
I know I can do justify content, but I now remember is the justify content space in between. They're like no, just listen to the sentence go there. All right, okay, it's just by content center, right and yeah, that's exactly right. Being able to show how you think is going to help you not answer like not only answer questions but to help build trust in him.

[00:07:12]
Well, you know what you are passionate about this. You think about your code you're communicating just in the end coding, contrary to popular belief is social. And you have to be able to talk through the ideas and the issues that you're having with people as well as the problems that you're trying to solve.

[00:07:32]
So I would say if we were going to be honest, we're going to do it from scale on one. As in, you just hello world yesterday to attend, as in you go to a coding a dark competition and they give you 15 minutes to knock out airbnbs UI using only HTML CSS.

[00:07:51]
Like you get first place I would say, six or seven when it comes to an entry level developer because these are the fundamentals, right? These are the things that are gonna save you your entire career, right? For HTML, CSS, JavaScript, these are the things these are the big three because you're on the way up your this is your domain, right?

[00:08:16]
Just like in the military. You don't want a person who's a four when it comes to being a rifleman, like doing their job around you, right. That's where my you're laughing. That's where my experience comes from, right? Like you know, I you know you got to at least be 80% to be around me because lives are on the line.

[00:08:39]
So same thing you know, at I will take that same rule that 80% knowing, being competent enough to build things or be able to quickly find a solution build things. That's important. Or be able to expertly talk about the things that you want to build. So does that making sense chat?

[00:09:02]

>> No, your analogy of hello world being one Coding up Airbnb with only HTML and CSS in ten minutes and you have to be a six or seven. That's a great figure to tell me a ballpark. Now JavaScript, how good are they? I mean, JavaScript gets deep. I mean, there's a lot a big difference between writing an object, or an array, or a model, or making a, using a snippet to create a react component, and like really understanding functional programming, and closures, and concatenating, and like how far down the rabbit hole?

[00:09:46]
Do you got to go?
>> My general rule of thumb when I tell my veterans is when it comes to JavaScript is there's no such thing as being over prepared, right. So that is because like you said, Java's like JavaScript is our battlefield. JavaScript is the fluid constantly evolving, highly opinionated different from team in team area, right?

[00:10:13]
So that's our firefight is front ends, right? So when you're dealing with doing about that there's no such thing as being too prepared, you can really put a number on it because it is volatile the way is written is different from team to team. That's why they have style guides like the Airbnb style guide if you're looking, have you ever seen that?

[00:10:39]
You have style guides, you have like functional programming, object oriented programming, you have all these things that you have, that you have to at least be exposed to. So don't focus on competency focus on a core competency, but don't focus on like as an entry level. Then they're going to expect you to have complete mastery, but they will expect exposure they will expect a hunger to know more interest, right?

[00:11:07]
And start where you're at. You're a new programmer started ES 2015. And then as you get comfortable with that, you're able to build most of your things are that go backwards compatible, right? Because no one knows all the things, like contrary to popular belief, every programmer you're looking up to Google something that you would not like they'd be ashamed to tell you every day.

[00:11:28]
It was like six months ago, until I just realized that if I just do link, Colon, CSS, the style sheet pops up automatically in my co-editor when it came to things. I would brain for how to do it all the time. So everyone is always looking up things we just get better at googling than others.

[00:11:51]
So don't pick yourself up over that. It's just that as you get better, your Google gets better and your ability to find questions and answers gets better, and your questions get better. Just keep plugging away. I always recommend coach challenges or just talking to people. That's how you know you build a thing.

[00:12:13]
And you converse as being plugged into your community and having people who are more advanced in you on it, it actually helps. I'm sure Minneapolis has a slack that's dedicated just to JavaScript.
>> Looks like we have a question in chat. How important are data structures and algorithms to an entry level job interview?

[00:12:35]

>> Data structures and algorithms, it varies. Data structures and algorithms comes into play at the higher level position. So if you're at a agency or startup, they just wanna know if you can build things. But if you are like, okay, Facebook and Netflix, yeah, data structures, algorithms can become super important especially when it comes to the ideology of big annotation and performance, because billions of people use those and there are certain things like autocomplete when people are searching and they want to make sure that that stuff and you understand those tools.

[00:13:17]
But as an entry level developer, depending on your background and the job that you're looking at, it varies. There are some jobs that have had that. No, it was important. There was some jobs where no one cared or talked about it and they're both fortune 500 companies. So like I said, that varies.

[00:13:37]
For entry level dev though, it's better to be overpaying underprepared. There's a great course on front end masters for data structures and algorithms. We're not going over that you would you're thinking about is the interviewing process. Once you get to the end, this is all about how do we get, you know, even to the point where a technical person is talking to us about data structures and algorithms, right?

[00:14:01]
You haven't even gotten to that point yet. So let's move on let's try to stay focused and on task for that because why we have to get the interview before we start talking about data structures and algorithms right?

