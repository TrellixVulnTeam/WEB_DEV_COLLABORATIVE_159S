[00:00:00]
>> [MUSIC]

[00:00:03]
>> Kevin Whinnery: So we'll take 20 minutes or so to go through that. We'll take a look at what this code could look like and then we'll finish up with any questions or deeper dives into any of the topics that we covered over the last couple days. Alright, so we'll at least go over the basic configuration and tracking the initial page view.

[00:00:29]
And then the custom event tracking would happen within the guts of your view JS application as you're selecting different filters. If you're interested in tracking which to use are being clicked and things like that. We'll kind of focus on the page view one right now. So the first thing that you would need to do is npm install universal-analytics.

[00:00:55]
And I then we would create a visitor which we'd have to propagate to other pieces of our application. So we create a new visitor object with a ua. And then we would pass in the tracking code that we'd created when we signed up for a new Google Analytics account.

[00:01:16]
I actually already had one so I just created a new property which gives me a tracking ID that I can use in my code, so I'm gonna copy that. And plop that guy right in there. Now once I do that the signature to actually track a page view, is visitor.pageview, and then we would pass in the current page being viewed.

[00:01:49]
I think the default if you don't pass one in is just trying to get the location of the current page. But you could do something like window.location.href,
>> Kevin Whinnery: To pass in the current page. And then the event the way that this particular API is set up, the event won't actually fire until you hit Send.

[00:02:12]
And then that will actually initially send off the page view to analytics to track that event in your application. Now the way that you would probably approach adding this to the router for the application is having this router function take in addition to the view app as a parameter, also this visitor object.

[00:02:39]
So if we go to the routes in addition to taking the app, we'll accept a visitor as an argument and then for each of those we'll configure the router to send a page view event when any of these routes are reached. So within each of these in addition to setting this property on the View app that's gonna be a part of the view model for the visibility of the current to-dos.

[00:03:15]
We'll also call a visitor.pageview. Then we'll pass in, slash visibility, which is the shorthand for the slug that we're seeing. So we'll track all of those different filters as an individual page view in our application, and once again we'll have to immediately hit send to actually send that off to Google.

[00:03:44]
So in a single page application, this is typically what you do, if you are handling routing on the client side, you'll need to manually send those page view events to Google, or else every visit to your site if it's a single page application will appear as if it was only a single page view, when in fact they might be viewing multiple pages within your spot.

[00:04:05]
So that's the basics of page views, and then also with that visitor object within your JavaScript, that's gonna be handling events for button clicks and other user-created events, you have the capacity to create those custom events which you can then use in your Google Analytics reporting later on.

[00:04:27]
But that's pretty much all there is to it. The only bit that you probably are gonna want to do, and that was part of the GitHub issue, was to only execute this logic if you're in production. So there's a couple ways that you could do that, but probably the easiest is in the view, we already have some logic here that is conditionally executed based on the current environment.

[00:05:02]
So in this, inside the same conditional, we could place some additional JavaScript or maybe just set window.environmentType = production or something like that. So we would conditionally create that JavaScript in our application and set that JavaScript property such that we could access it from our client side code.

[00:05:35]
So now, say in our in our app.js, before we actually go to the trouble of creating this visitor, we could do a check. So you know if (window.environmentType =
>> Kevin Whinnery: Production. Then you would actually go through and create the visitor. Otherwise you wouldn't. Because you won't want to track that stuff in development mode.

[00:06:10]
Once you actually do get this implemented there is a delay before the data starts coming in to Google Analytics. It says it can be up to a couple hours. In my experience it can be anything from you know a few minutes to a couple hours. So it'll be kind of dependent on how things are moving through the Google tubes on a given day but it could take quite some time before the data starts showing up.

[00:06:37]
So that is a, one handy way to implement Google Analytics and integrate it within the rest of your JavaScript if you're building a JavaScript application in this way.

