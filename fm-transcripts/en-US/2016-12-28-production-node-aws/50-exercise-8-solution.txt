[00:00:00]
>> [MUSIC]

[00:00:04]
>> Kevin Whinnery: The exercise that we are just working on was to integrate Rollbar into our error handling process for our application. Now, I did sort of a quick and dirty solution. So I can show you what happens, but Rollbar does provide a Node.js module that you can include in your application.

[00:00:28]
So, you can NPN install a Rollbar. And if you're doing an application based on Express, they have a connect to middleware that you can plugin after the rest of your routes have been defined and it will handle the integration of handling or it'll pass off all the data that I can glean from the request off to Rollbar whenever an exception is thrown.

[00:00:55]
So I have my error handler here and my disposable account ID which I'll terminate shortly, but I also have introduced a route in the application which I intend to throw an exception. So when I open up my browser, hit Error. In development, Express will actually show me the stack trace here in the browser.

[00:01:25]
And in production mode, it won't do that, but I've generated an error. I got a stack trace and I need to know I need to know what's going on. So I'm gonna head over to Rollbar and look at my dashboard and I've just signed up for this account, so I have a lot of to-do items.

[00:01:43]
I can invite more people to my team. It's setup deployed tracking, which is actually super useful. When you do a deploy, you can possibly correlate errors to a particular deployment. There's lots of different stuff you can do. But on the dashboard, I can see what errors have occurred from my application over the last 24 hours.

[00:02:06]
So I can see, I sent like the Hello World message during the onboarding experience and now I'm starting to get an actual error. So if I click on that, I can see the status of that issue. It's actually possible to have your team resolve issues through Rollbar. We don't actually use Rollbar for that.

[00:02:25]
We use PagerDuty to actually track down who is responsible for closing out an issue, but there are some workflow possibilities there. If we scroll down, we get the entire traceback from our application showing us the error happened on line 37 of webapp.js. So, it helps us to understand where the error occurred.

[00:02:50]
It'll tell us when all the occurrences have been, so we get a timestamp. The browser that generated the operating system, if available. The route, which of our servers it came from. So if we're running the application on multiple servers, we can help track down the precise box that it came from and we can go in a couple other bits from this.

[00:03:13]
If we had a logging user, we could configure our Rollbar integration to actually send the account information or some kind of account identifier for a user to Rollbar as well. So we could say, account one, two, three, four just experience this error in the production environment like maybe we need to follow up.

[00:03:33]
We can see some graphs about like the browser and OS. If you have deployments configured, you can see those deployments. You can see what the potentially suspicious deployment would be and other similar errors. Now when one of these things happens where the value of this comes in is the is the notification scheme, because if an error happens and nobody is listening, then it doesn't really matter how effectively you log it.

[00:04:04]
So on a on a personal and on a project level, you can configure different notification channels. The only one that's active by default is email, but you can notify yourself of errors in many many different ways as you can see. Again, the one we like to use is PagerDuty, cuz PagerDuty has itself some very robust notification capabilities and it can alert an entire chain of command, essentially and escalate at each level if you know one person doesn't answer the page.

[00:04:41]
So we usually, I have Rollbar. We have Rollbar passed through to a PagerDuy when necessary. Any questions on a Rollbar?
>> Kevin Whinnery: A very simple integration. There's more data that you can send to help diagnose your errors, but very easy to get setup. Definitely I recommend it, if you're looking for a service like this one.

[00:05:10]
Lets you know when bad stuff is happening. It's just one part of a notification scheme. The other things that you'll wanna look at configuring are maybe a Pingdom configuration that will check your servers from the outside world to ensure that they remain accessible. You can check the HTML, that's coming back to ensure it's doing what you expect.

[00:05:34]
And then within Elastic Beanstalk, if you're running on Beanstalk, there are some configurations around notifications as well. You can setup, such that when certain events happen on your instances. You can see that happen. As you can see, since the load has died down, the other two instances that got spun up have been terminated.

[00:06:00]
And so, I'm backed down my single instance. Over here in a monitoring, you can dig into the data coming out of your instances. And then with the alarms, you can see if any are alarm configuration you have. So for like a CPU utilization and say, let's see. If I click on this little alarm, we can send out notification if the CPU goes over a certain level and we can specify an email address that gets that.

[00:06:40]
There's also other services Amazon provides that are more robust like a cloud watch that can do more notifications about happenings going on inside your AWS account.

