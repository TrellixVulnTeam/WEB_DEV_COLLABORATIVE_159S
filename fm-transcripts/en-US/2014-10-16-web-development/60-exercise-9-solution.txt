[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: All right, so how we doing with the click listener part? Are we doing okay with that?
>> Brian Holt: All right, so because we're nice people and we like to let our users know, in fact I'll just start going along with you.
>> Brian Holt: We're gonna have, what did I call that button?

[00:00:26]

>> Speaker 2: BTN.
>> Brian Holt: BTN.
>> Brian Holt: So we are going to have ('.btn').click(function(), okay. Voila! Click listener. Okay, and let's just like, we'll just throw up an alert real quick just to make sure that actually works. Like you'll find that this is a common practice like did this actually work?

[00:00:49]
Does this actually do what I think it does? So we click here hey if actually does like listen for click events, okay. So awesome. Step one done, okay. Let's go ahead and throw up a little loading thing to be nice to our users, so what did I comment a little text.

[00:01:08]
I guess that's a misnomer because it's not actually gonna be text after we're done with it but we'll be okay. Text dot yeah, go ahead.
>> Speaker 2: Somebody tried to declare a function before the ajax call and then they wanted to call that function, where the anonymous function was declared.

[00:01:31]

>> Brian Holt: Sure you can do that.
>> Speaker 2: But he says it's not working I guess.
>> Brian Holt: Okay, so you'd have like function.
>> Brian Holt: I guess it'd be like var function = responder or something like that, okay. Or sorry, var responder = function, okay. And we'll just throw our alert in here, right.

[00:01:57]
Alert here and here you would, rather than putting in a function, you would say responder. There should look somewhat familiar right, like you can pass functions around like variables, okay. And then we should be able to click there and assess here, right. That's also possible, I'm a big proponent of doing anonymous function in listener because typically you only want to call that from one place, so it makes sense to do it that way.

[00:02:37]

>> Brian Holt: Okay, so let's throw up a .text.text. Didn't actually mean to do it that way and we're gonna say loading right like that. So now when we click it says loading. Okay, so now our user is informed, it's like I have received your input. Hold tight, and I'm gonna give you this thing that you're looking for.

[00:03:06]

>> Brian Holt: Okay, so now this is where we actually go out and like, reach out to the server. So, what jQuery functionality am I gonna use? Ajax, awesome, so, I'll give you a sec to, to give that a shot again if you, if you want to, if you want to refer back to the one where we were reaching out to the Meetup API, probably would be a pretty good thing to do.

[00:03:38]
The one thing I will caution you that is different from the previous one is that part where it says JSON for the Meetup API just leave that entire line out for here. You don't wanna bring that over.
>> Brian Holt: Reason being that the Reddit API and the Meetup API work differently that way.

[00:04:00]
Why don't we even go back for just a sec and bring it up here.
>> Brian Holt: Let's even go back to the earlier one that's just really simple, okay. Again this is the meetup one that you click and it just blahs all over your web page. You got text out loading just like in our other one.

[00:04:25]
We're going to do dollar sign dot ajax right. Still doing a get request. We're going to a different URL. We're going to the read it API not the meet up API, and then we're going to have a success function in there. Should look somewhat like this. In fact, if you wanted to just test it out to make sure it's working, just go ahead and throw literally this exact line in there, right.

[00:04:47]
Text.text json.stringified data and you'll see it. It should just blah the entire Reddit API response all over web page.
>> Brian Holt: Honestly, this is pretty much unchanged, other than leaving out datatype, JSONP and change the URL and then it should work. Again, just as an overarching concept about learning to program.

[00:05:16]
There is no shame, there is nothing wrong from copying other people doing and modifying it to your own use case. My only caveat to that is, do your absolute best to understand what's going on and why you're doing it. It's a really bad thing to pull code out, throw it on a page and then not understand what's going on.

[00:05:45]

>> Brian Holt: Okay, so let's go ahead and work on this API call a little bit. So as you might imagine, $.ajax. Okay,
>> Brian Holt: Type: "GET". url,
>> Brian Holt: Sorry, not function rather we want just literally copy and pasting this. I guess it's not literally I'm not cutting it out of my monitor.

[00:06:20]
But figuratively copying and pasting.
>> Brian Holt: Okay, with me so far? And then we just need to give it a success listener.
>> Brian Holt: Which by the way, we were talking about events, this success function is just an event listener just like a click function is. The ajax goes out, it completes and it fires off an event and it says hey.

[00:06:44]
I finished the thing that I was doing. Okay, he finished. I was listening for that. Now I'm going to go do this. Same concept at play here.
>> Brian Holt: Okay and now we're gonna say.
>> Brian Holt: Somebody might be wondering where this data comes from like is it just magical?

[00:07:07]
It's one of those things that you have just to know that the API documentation will tell you that whenever a success function comes back from jQuery it's just going to give you data. It is this way because they programmed it that way, and you know that by looking at the documentation.

[00:07:27]

>> Brian Holt: So there's not some secret handshake or something that you don't know about that's going on behind the scenes, it's just you have to read the documentation to figure that out, okay. $('.text').text then we do a JSON.stringify the data okay.
>> Brian Holt: Lo and behold, now when we click.

[00:08:05]

>> Brian Holt: Here we're getting the entire response just kind of vomited out on the page in all of its glory.
>> Brian Holt: We follow this so far? This makes sense? This is just more or less reviewing what exactly we did with the meet up one, okay? All right so, question now becomes, we want to display them nicely as images, right?

[00:08:32]
We don't want it to just throw up on the page, we actually want it to do something. Okay, so the first thing we need to do is we need to go back and look at what the data looks like. In this case, we have a thing called data, right, and that's where all of our data is being stored and it's inside of data.children.

[00:08:52]
So let's get rid of that one. So let's just get rid of this, okay? So, we need to loop over data.children, right, because there's many entries in data.children and we wanna get all the images out of each one of them. So, we're gonna write a for loop. Right, that should sound like something that you would use a for loop for, okay?

[00:09:18]
So for var i = 0; i is less than what? So we have data which is the whole object. In fact I'm gonna change the name of this to be response.
>> Brian Holt: They might say like you can't do that, right? It's called data. Well in reality, you can call whatever you want.

[00:09:36]
You can call this like, thisIsNotData or whatever you want to call it, right? This is totally up to you to call it, you just have to know that the data's always gonna come in that first parameter. So whatever you call that first parameter, that's just from there on out you have to call it that.

[00:09:53]
So I'm gonna call it response just for a little bit of clarity's sake. So response,
>> Brian Holt: Okay, and I'll show you, right? So it's gonna be response.data. A lot of people, when they see data.data, get really weirded out. So I just wanted to clarify where each one is coming from, okay?

[00:10:15]
So we're in response.data, which response is now this entire object, right? And data is this object right here, right? So now we need to go into children, right? Which is right here. So .children. And then we wanna loop over all of children's containing all the objects inside of it.

[00:10:41]
So if you remember, we can do that if we just say .length. That'll give us the number of how long children is, okay? That's it, now we're just gonna say i++ which means at the end of every loop, increments your counter. And now we have a for loop that we're going to loop over each one of them, okay?

[00:11:03]
So let's,
>> Brian Holt: I don't want to do an alert cuz that would be really bad, but let's just do a console.log of response.data.children[i], right? Which is gonna give us each individual child inside of that array. So let's just try that, see what happens here. Look at our console and we should see a lot of these objects just been logged out right, we can look at anyone of them and see.

[00:11:42]

>> Brian Holt: Hey look, this one is called by author puppy, and it's from Imgur, right? So now we're just logging out each individual object that's coming from the API, okay? So now we know that our API call is working, and we're looping over it correctly. Are you okay with that so far?

[00:12:02]
Okay, I'll take that as silent compliance.
>> Brian Holt: So, awesome.
>> Brian Holt: Now we have this data. We have each individual child that we can address now, okay? What do we wanna get out of each individual child? Well if you notice, each child has a thumbnail, right? So this one has a thumbnail.

[00:12:30]
We scroll down here, this one has a thumbnail. Scroll down a little bit, this one has a thumbnail. That's what actually we care about, cuz that's what we're gonna be displaying.
>> Brian Holt: Okay, so what we're gonna do is we're gonna use our jQuery magics and we're gonna say .text.

[00:12:54]
What method are we gonna use here? What happens if we use .HTML here? We're only gonna see the last one cuz it's gonna replace all of them. And the last one will be the last one displayed, yeah?
>> Speaker 2: Somebody's asking about they thought success was deprecated, and you should be using done and fail.

[00:13:13]

>> Brian Holt: Yeah, so yes but no. [LAUGH]
So there's a thing in JavaScript called promises, we're not talking about them today. It's kind of the newer way of dealing with responses. This is the easier way for people to get started into it and they accomplish the same thing so we're gonna stick with this.

[00:13:37]

>> Speaker 3: If you're interesting in learning that one.
>> [LAUGH]
>> Speaker 3: Take the jQuery course. But deferreds.
>> Brian Holt: Yeah, I mean they're called deferreds, promises,
>> Brian Holt: But yeah, if you're really interested in learning about that, go check it out on either Frontend Masters or search for like JavaScript promises.

[00:13:59]
Okay, so actually let's just even build this before.
>> Brian Holt: Oops, I didn't want to delete that did I? There we go. I want that.
>> Brian Holt: So we're gonna build an image tag now for each one of these, right? So we're gonna say this is like my image, right?

[00:14:26]
And we're just gonna say img src= and you just wanna stick its thumbnail there, right? So we're gonna put something here but we're just gonna close this out real quick, okay?
>> Brian Holt: In the middle here, it's gonna be this response.data.children[i], right, in which what do we actually want to get out of each child?

[00:14:50]
We want to get the thumbnail, right? So we're just gonna say .thumbnail. So this is gonna go into the response object this is gonna go on the data object. Then we're gonna go through the entire children array. For each one of them we're gonna grab out the thumbnail.

[00:15:11]
That's what that says. We now have an image tag, right? So you might be tempted to do .text .html and then say image.
>> Brian Holt: Let's try that.
>> Brian Holt: Well we got nothing so that's not good at all.
>> Brian Holt: Unexpected token.
>> Brian Holt: Let's see var image = "img src".

[00:15:57]

>> Brian Holt: All of that needs to be.
>> Brian Holt: [INAUDIBLE] Okay, so like this getting something there but no image.
>> Brian Holt: Source equals undefined so? What's happening here?
>> Speaker 3: You have a single quote and a double quote next to each other?
>> Brian Holt: So that's a good question, why do we have that?

[00:16:30]
So this is a string literal, so this is telling JavaScript I literally want you to put this there. But if you remember, when you're looking at source right? If I go up here and say, ing src= it needs to have quotes in it, right? So you actually need to have JavaScript to print out quotes in there.

[00:16:58]
It's kind of weird, right? The other thing is, if you want it to do, well and the reason why I don't do double quotes there, cuz otherwise, JavaScript's gonna get confused. In fact, you can see my syntax highly messed up here. So it doesn't care as long as your matching quotes.

[00:17:13]
In fact, now I'm having a hard time. There you go. So this is going to be inside the string, and it's required because JavaScript or rather HTML needs that quote to parse the image source correctly. Does that makes sense?
>> Brian Holt: Response data children.
>> Speaker 2: In check there, actually do you need a data after the children?

[00:17:41]

>> Brian Holt: Yep that's it, thank you.
>> Brian Holt: So what they kindly pointed out to me online is that each child has its own data attribute, right? So there's data right there, there's also data right there. And notice, I was getting undefined. Why was I getting undefined? Because I was trying to access a property that didn't actually, that undefined, right?

[00:18:06]
So JavaScript says, you're trying to get something that's not defined, so screw you, have it undefined. Or here, you asked for it so you can have it. [LAUGH] That's probably more akin. I make JavaScript to be a cruel mistress. Okay.
>> Brian Holt: Let's try that.
>> Brian Holt: Can you check out your little puppy right there?

[00:18:32]
That's nice, okay so now we have only one image why? Because we are using HTML when in reality we should be using append, right? Cuz we wanna be continuously adding things. Okay, so now, we try doing this. Now behold, many puppies.
>> Brian Holt: Now we still have this loading thing here, why?

[00:18:56]
Well when it loops through the first time, it's not gonna replace it, it's always going to append. And once you are done loading, you actually wanna get rid of the loading thing right? So what we would do is, we would just remove it as soon as it came back.

[00:19:09]
So before the four loop, we're just gonna say, $.text.HTML or text, either one would be fine. And just say that. Please clear out everything you have. Make yourself an empty string. I'm about to give you a bunch more stuff so you can have content. Now if we say click me, now we actually have real puppies.

[00:19:32]
And some of these thumbnails won't work. Not really sure why but that's the case and then you can do all sorts of fun things now, right? I can say cat, and we'll get kitty's back. Or we can say duck.
>> Brian Holt: And we'll get cute ducks back.
>> Brian Holt: Look, little ducks.

[00:19:57]
Yeah, but kinda cool right? We've now built this app that will give us a bunch of cute pictures from Reddit, really this is kind of the first app we've built. Pretty entertaining right?. Now if you wanna take this a step further what could you do right? You could actually have an input box at the user or put in something and then you would change the URL here and you would put whatever the user input was there and then you would change what you were searching for based on what the user asks for.

[00:20:30]
I hope you kinda start and see here I'm giving you a bunch of puzzle pieces that fit together in a bunch of different ways or like Legos is probably a better way of putting it and you can build a spaceship or whatever. You can build whatever using these tools whatever you can think of.

[00:20:49]

>> Brian Holt: Does this make sense what we've done here?
>> Brian Holt: Now if I asked you to go write something really similar to this do you think you could do it now?
>> Brian Holt: The answer is, probably with difficulty, but the answer is with difficulty is better than no.
>> Speaker 4: [CROSSTALK]
Some of the pictures are coming back as not found.

[00:21:21]
Is there a way you could capture that in your loop and say okay. Don't display those? [INAUDIBLE]
>> Brian Holt: So probably what you'd wanna do is you'd wanna have some, is this a url? If this is a url, then display it, if not, don't display it. So use an if statement, right?

[00:21:39]
If it's displayable, then display it, if it's not then don't. I'm not going to do that right now, but that's what you would do.
>> Brian Holt: You could also change the subreddit here. I do not want to change the subreddit. I trust aww, I do not trust the rest of Reddit.

[00:21:59]
But you could also search for other things on other subreddits as well. That's kind of something we could do.
>> Brian Holt: How about this? Does this little line right here, the response.data.children.data thumbnail, do that make sense to people? Have we talked about that like you're accessing properties inside of an object that's just get's really, really, really nested?

