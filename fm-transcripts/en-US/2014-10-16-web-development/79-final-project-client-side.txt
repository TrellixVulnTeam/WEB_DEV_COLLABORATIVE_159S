[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: We have now introduced all the new concepts you would ever need to ever develop any app ever. No, that's actually not true, but we've introduced every concept that we're going to introduce in this workshop. So from here on out this is just gonna be a giant review and we're just going to code up essentially a very basic version of Twitter/ It's not going to have any concept of users or followers or re-tweets or anything like that.

[00:00:29]
It's gonna be more like Secret, if you've ever heard of the Secret app, that people are just going to post little anonymous tweets out there. So we have an entire app just coded for you that you can look at here. And the entire thing is already finished and ready to go if you wanna look at it.

[00:00:46]

>> Speaker 2: Cuz I have a quick question about request.body when were that comes from or going from.
>> Brian Holt: Sure, let's go ahead and take a look at that, request.body. We refer to it here in posting. So right, request.body username, request.body password. So if we look at the posting.JS right here, I'm setting up a username and password kind of like payload with J Query, right?

[00:01:18]
Now the server side needs the ability to access that. It does it through the body. So if I called this like user, right? I would have to go back and change this to be user. So it's just kinda this contract of how the client and the server are going to talk to each other.

[00:01:37]
Does that make sense? Okay. So let's talk about our project really quick. I'm going to go over the client side development of it, and then I'm going to hand it off to Nina to finish off the node portion.
>> Brian Holt: Cool, so If you haven't already cloned it, this is the address for that.

[00:02:08]
And here essentially are the requirements, like imagine the product team coming to you, you're going to build this app, and saying here, we need this, and it's up to you to solve that problem. So we're going to write a server in node.js, the server will serve the HTML,CSS and JS necessary to run our server.

[00:02:29]
It's going to accept a GET of the latest servers, meaning it's going to accept an AJAX request to pull down all the latest tweets. It's going to accept posts that we're going to put out there, so that we can post new tweets. And then, for each new tweet, the server will attach the time of when it was posted, right?

[00:02:54]
So, you can like, this was posted yesterday, at 5 o clock, or this was posted ten minutes ago. So those are our basic requirements, then we're going to create a webapp that's going to make an Ajax request to get new tweets. It's going to have the ability to accept user inputs via POST, so that people can tweet new things.

[00:03:21]
And we'll display in a pretty way those tweets when the server loads, as well as after you post a new tweet, it's going to add that tweet onto that page. Things that we are not going to do, there's going to be no database to this, right? So if you restart your server your tweets magically disappear.

[00:03:41]
So obviously this is not a really complete web app. You need some sort of persistence, right? And we're not gonna have any notion of user follows, re-tweets, or anything like that. This is just purely anonymous tweets. So I'm gonna start here with the web app.
>> Brian Holt: So let's, essentially, what we're gonna do is we gonna go over here in node, or in app, so this entire app lives in app.

[00:04:05]
So the first thing you gonna wanna do.
>> Brian Holt: Is if you're just here following along with me, you gonna have to do npm install with package.json Mine are already installed, so it's not going to do anything. But if you do not have it installed, it's gonna split out its whole log.

[00:04:25]
Okay. And now you should have a node modules which will have body-parser and express. All right. Cool.
>> Brian Holt: So. We're gonna be working purely in the public directory.
>> Brian Holt: We're gonna have index.html.
>> Brian Holt: And it's gonna be pure and simple html, right? Don't worry about the charset. We're gonna have a link at the top or a title at the top, like on the very top tab, right?

[00:04:58]
So if you're talking about title like right here. It's gonna be called Tweeter, okay, and here we're going to load in some Google fonts, right? I get kinda sick of using the default font all the time, so there's a thing called Google fonts. If you're not familiar with it, you just search for Google fonts.

[00:05:23]
They're essentially a bunch a free fonts that you can use on your website. We're just going to use this top one right here, open sans. Okay, we're going to load that up top and that's just loaded by css style sheet, and then we're going to load style.css which is a style that we've written right here.

[00:05:45]
Okay? We actually haven't really talked about this so far, but this is how you load external stylesheets. You put a link tag on the top, there's an href which is essentially pointing to where your stylesheet lives. In this particular case, it lives in the same directory. So we're going to tell it just load style.css.

[00:06:07]
It lives in the same directory. Pretty simple.
>> Brian Holt: Okay. That's our head tag. Now we're going to go into the body tag. And in the body type we're gonna have an h1, it's gonna say Tweeter. Okay. It's got a tweet container, actually let's go ahead and just like look at this and then we'll come back and discuss how it actually is working.

[00:06:33]
So.
>> Brian Holt: We're in app, and I'm gonna say nodemon app.js
>> Brian Holt: So now we should just be able to go here, close this out. Okay. This is the basic styling and such.
>> Brian Holt: And these are the different tweets, essentially. Okay?
>> Brian Holt: So we're gonna have, this is the say something part of it, right.

[00:07:11]
So this is gonna be this part right here. Or you can actually type in something and tweet it out. Okay. It's gonna replace all that we talked about. That that's a grey text in the background and it's gonna have a class if new text input and Id that we're gonna reference later in the JavaScript.

[00:07:29]
Okay and then a button this kind allow them to tweet. Okay, then we have this div right here which is called tweets. We're then going to later fill this tweets with the tweets from the server, okay. We're loading jQuery, we're going to load our tweet.js. Notice that this order actually is important that JQuery comes first and then comes our tweet.js because our tweet.js which is this js that we written is going to reference JQuery.

[00:07:58]
Therefore, JQuery must be available for tweet.js to work. Okay. So let's go into tweet.js this is JavaScript that we are going to have written.
>> Speaker 3: So could you talk about why those JavaScript includes are at the bottom, instead of at the top, with the CSS?
>> Brian Holt: Definitely. Good question.

[00:08:20]
It may seem a little weird that the CSS goes to the top, and the JavaScript goes at the bottom. The short answer, is that it's a best practice. It's just something that you do, because it's the best thing to do. Now, the reason why it's the best thing to do, is that when you load a content, you don't wanna load ugly un-styled content.

[00:08:40]
And so you want your CSS to load before your html finishes loading. So that when your content loads for this the first time it's already pretty. Right? It's not so, it loads with like no style and then all of a sudden everything just magically looks better. It's a bad user experience.

[00:08:58]
Okay? But we want all of our pretty styling to load, and then we want all of our JS to run. So we don't want our page to be load slower because the JavaScript has to load first before it can render. And the browser's dumb. It's just gonna go down line by line.

[00:09:16]
It's like, okay, I'm gonna do this and wait. I'm gonna do this and wait. I'm gonna do this and wait. So if you have your JavaScript up here, it's gonna see like I'm gonna load all my JavaScript which doesn't really make much sense anyway because your stuff isn't there to be interacted upon yet.

[00:09:32]
So again short stories, it makes your page load faster if you do it this way. Okay, good question. So the first thing that we do when you load the page is we're gonna do a GET on /ajax, which Nina will talk about what that actually is. But notice that this is different from like the Reddit API, which we had a full URL for, right?

[00:09:56]
/ajax is actually on the same server as where this index.html. It's a relative path, right?
>> Brian Holt: So it's going to load ajax from the same server. And then here you have the success function here that's going to cause append new tweet with these tweet data items right. And in the tweet data item, there is a tweet.text and there's a tweet.time.

[00:10:28]
So we haven't really talked about this, a really common way of keeping time in programming is essentially it's called epic time, epoch time, I'm not really sure how you say that. E P O C H. It's seconds since January 1, 1970.
>> Brian Holt: Yes. In this particular case it is milliseconds.

[00:10:55]
Often it is just seconds though. But just make sure you're aware of what we're talking about. Either seconds or milliseconds. Anyway. So it's just a big number, right? So I mean, it's a huge number right now. Think of how many seconds of the past in the past almost 50 years, right?

[00:11:13]
Yeah, so that's what's this is doing. This is taking a time in the seconds since 1970 and it's just turning it into, if you look over here a nice little like well formatted time that actually makes sense to humans. That's so what that's happened there okay. And then we're just wrapping it in a bunch of html which we then have styled okay.

[00:11:38]
And then I realize that I've actually called this append new tweet and later I called it prepend. I call prepend. Which you imagine append puts it at the end prepend puts it at the beginning. But I did that because you want the most recent tweet to be at the top, right?

[00:11:55]
You don't want to have to scroll down to actually see your new tweets. So that's why we use prepend. Okay. Questions about that so far? Okay. So here we're calling a click listener on the tweet ID, so let's go look at the tweet ID. Which is here, id tweet.

[00:12:25]

>> Brian Holt: Okay so every time that button is clicked, it's gonna send out an ajax request. It's gonna post to ajax. Notice that there's, we have a get on ajax right here. And we have a post on ajax right here. But on the server, we've actually separated those two out.

[00:12:42]
Nina's going to talk about that. We're going to send JSON. And we're going to tell the server, hey server, I'm sending you JSON, just FYI. And then we're going to send it to Jason.stringify. We seen that before, we're taking an object and making it a string. And, we're going to send a tweet, which is going to have the value of, right, yeah it's over here.

[00:13:07]
Whatever is in here. So we're gonna tweet whatever comes out of here. That's what that payload's gonna have right here. On success it's gonna get back data. Data's actually gonna be a new tweet of this tweet that you've sent that you're gonna get handed to the server, the server's going to essentially hand it back to you so you can display it.

[00:13:30]
And then you are going to call the append new tweet, and here you will just clear out the value. So just so you can see how this works, so this is my new tweet. Okay, you click tweet. Reaches out to the server, the server then hands it back to you and pre-pends that new tweet right here.

[00:13:50]
Cool, any questions about how the JavaScript works?
>> Brian Holt: Okay. So, now we have style.css, talked about box-sizing, right? We're doing border box just to make everything easier. Like I said I put this on every CSS file or every CSS project rather. Body, we're gonna give it a font family of Open Sans right?

[00:14:17]
That's the one we're loading in by Google. And then here we have sans-serif sometimes people are not able to load external fonts so we give them kind of a fall back, right? Everyone has a sans-serif font on their computer guaranteed so you say if you don't have open sans available please use a sans-serif font.

[00:14:38]
We're gonna set the text color to a nice un-harsh black. And if we don't do this, this margin 0, let's just change that. I'm sorry, that doesn't work in CSS, does it. So let's just take it out. If we take this out, notice that like right now, this border goes all the way to the edge.

[00:15:02]
If I refresh the page now, it actually won't push up against the border. So you have to have that margin 0 or else it won't push up against the border. So again, now it'll push up against the border, okay. Leader-h, that's gonna be that thing at the top, right.

[00:15:20]
It has a background-color of black and it has a color of this is like a really like an un-harsh white. Okay so it had a padding on it which is essentially because of this nice black look around it right. If it didn't have that padding around it would just be like really flat and in fact let's just take a look.

[00:15:45]
Okay yeah so like it has, like it just kind of pushes up it's kind of ugly. That's not what we're going for.
>> [INAUDIBLE]
>> Brian Holt: Okay. Tweet-container. So that's gonna be these things right here. We give them a nice border-radius. I don't think we've looked at that before.

[00:16:06]
But look at these, they have nice, little rounded corners. Fine spect element on that.
>> Brian Holt: So, tweet container, so border radius right here. If I take it off, notice that it has pointy corners now. That everyone likes nice friendly round corners. So, just gonna throw those up there.

[00:16:28]
Has a width of 80% of the screen. Notice it doesn't push all the way to the edges. It actually just sits there nice in the middle. The auto centers it. And I'm pretty sure. So we do this overflow:hidden right here. Remember we talked about the great collapse and how you have to sometimes clear it with clearfixes.

[00:16:52]
So this tweet button is floating to the right. And if you take an overflow hidden off the container's not actually aware of how that flow is supposed to play into the document flow. So if you tell overflow hidden it will reset it and say, okay this is actually supposed to fit inside me.

[00:17:06]
So that's what that does.
>> Brian Holt: Let's look inside a tweet container now. Tweet time, giving it a smaller font size, make it italic right? So now it's actually leaning a little bit. Color's gray because it's not the focus of it. This is not design school. I'm not a designer.

[00:17:27]
But margin bottom there. Tweet-body. Just made the font size bigger, essentially. And I think we've essentially gone through pretty much the style. Let's talk about this up here. So I actually made the input a little bit more fancy right? Like this blue border is not typical.
>> Brian Holt: Where is the focus?

[00:18:00]
Okay, so we have new-tweet-input with the 100% height, border, border-radius. All those things look familiar. Then we have thing called focus. It's called a pseudo class, right. So right now, it's not focused. It has a grey border. As soon as I click on it, it is now focused.

[00:18:18]
So you can have it actually apply different CSS when it's focused on. There's lot of different states for this and I'll show you one here for Tweet as well right? As soon as I start hovering over it, it gets lighter. As soon as I push it down, it gets darker.

[00:18:34]
That's all done with CSS and let's take a look at how that's happening. So btn-tweet, it has all these styles right here. None of those should look very intimidating to you. But hover, we move from this font color to this font color which is maybe in color green, lighter green and then when it goes active, which just means I'm pushing it down, it goes darker green.

[00:18:58]
Questions about that?
>> Brian Holt: Okay. And like that's essentially it for the client side code.
>> Brian Holt: It would be kind of an interesting exercise for you to, after you've watched this video, or after this, to go back and recreate just this. Not looking at the code I've written, but instead doing it kind of your own way.

