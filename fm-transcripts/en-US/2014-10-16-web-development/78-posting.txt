[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: So now we're gonna talk about POSTing, okay? Often we wanna send much more than just like a single parameter to the server. Imagine when you're trying to do like a form signup, right? You wanna set their user name, their passwords, their email, their address or phone number.

[00:00:23]
You wanna take an entire form of data in, you gonna do this by posting. And right now we gonna use jQuery and using Ajax, something that we've all done before and we're going to post to the server. So let's go look at node-exercises/posting.
>> Brian Holt: So notice I already gave you package.json, so let's get out of here.

[00:00:55]
I'm going to go into posting. Everyone just run npm install.
>> Brian Holt: Mine already installed, so it's fine, but yours should give a whole bunch of installing going on. And you should get both express and there's another one in there called body parser. Which I'll show you here in just a sec what that exactly does.

[00:01:25]

>> Brian Holt: Okay, so we're gonna look here at app.js. Require express and then require bodyParser. And then we're gonna have the app use the bodyParser for json parsing. Now why are we doing this? It's because express itself does not actually understand json. And the reason for that is express is flexible enough that if you want to have it speak XML or you wanna have it speak another language.

[00:01:54]
It's flexible enough to be able to do that. So you just say here is the parser that I want you to use when you're trying to understand what people are trying to tell you. So, you're gonna do app.use, the bodyParser, okay? Here we're doing the static, sharing again.

[00:02:15]
So that should look familiar. And then here, notice we're saying app.post instead of app.get. Key difference there. And then from the user it's gonna expect both the username and a password which come in this body object, okay? And then here, we're actually gonna do some switching based on, that if the name is Brian and the password is pass, which is probably my best password.

[00:02:46]
Don't steal my password. Then send a status of 200 which means yeah, you logged in and you're gonna say status:success. Okay, if they have the incorrect password or anything like that. You're gonna send him a 401 which means you can't log in, it means unauthorized and status failure.

[00:03:08]
You also might have noticed that we're not using end right now, we're using json, right? As you might guess this is gonna send json back instead of just plain text. Okay, and then here we're just saying app .listen. Here in the public directory, I mean just so you can have an idea.

[00:03:29]
I just have a little button right here that's gonna do ajax, something that we curved earlier. And it just gonna send up both the username and the password. Pretty cool. Okay, and then on success it's gonna log out the data that it sends back. Questions about the code before we move on to actually show you and then we can come back to talk more about it.

[00:03:57]
Okay, so I'm gonna say nodemon app.js, okay? It started the app. Let's see, let's go back here. We're gonna go to index.html, which is being served by the static assets. So I now have a username and password. Don't worry if you don't see these asterisks, it's my last pass, it's an extension I have installed, don't worry about it.

[00:04:28]
So I'm gonna send up first of all like Nina and wrong or something like that, like some wrong password. And it's gonna tell me, you are unauthorized to reach this API. But if I send up Brian and pass and I hit submit, I get success, right? This is obviously not the best way to write your log in.

[00:04:52]
But it's kind of a precursor example for how you would write some sort of authorization system. Questions about that, make sense?
>> Brian Holt: Okay, cool.
>> Brian Holt: And also notice right here in app.js, I'm logging out whatever username and password. So you can see right here it knows the name and it knows the password, etc., etc.

