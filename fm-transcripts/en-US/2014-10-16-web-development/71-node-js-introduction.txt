[00:00:00]
>> [MUSIC]

[00:00:04]
>> Brian Holt: One of the really, really fun parts for me talking about Node. Which is kind of a new and hot thing. Let's see. So we're gonna be running JavaScript which is the language that we already learned today and yesterday. But this is not gonna be JavaScript run in the browser.

[00:00:22]
This is gonna be JavaScript run on the server. So it's the same syntax. It's just there's some not slight but large differences to it. So essentially what Node is, is they took the JavaScript engine which is in Chrome, and they just ripped it out of the browser and they stuck it on the server.

[00:00:43]
So what you can expect from Google Chrome's JavaScript engine you can expect from Node. It's really cool, it's really fun to program, and if you're using it correctly it can be extremely fast. So who uses Node? I mean as you can see, not a bunch of slackers on this list.

[00:01:02]
This is actually a pretty big group of people doing huge amounts of scale and using Node in really cool ways. I was reading an interview with one of the guys of Walmart and they said that their black Friday last year was boring because Node made it so easy to deal with the traffic.

[00:01:18]
Which is crazy. I can tell you because our site went down on Black Friday, theirs not. So let's talk a little bit like, what is it. So again, JavaScript on the server and this is really cool because typically when you've been learning web development you have to learn one language for the browser, and then you had to go and learn another language to code on the server,.

[00:01:44]
So you had to either learn, like, JavaScript and PHP, or JavaScript and Ruby, or JavaScript and Python. Like, you had to kinda have these like, mental contact switches. When now, you just have to remember like, I'm on Node, so I don't have to use the window. Or I'm on the browser, so I have to use the window.

[00:02:04]
So the one thing I will give you as a caveat, if you're coming from another language like Ruby, like Python, Node is quite different. It's cool, but it is different. Let's go and do some Hello World. There's no code pen, or at least no code pen that I was satisfied for Node.

[00:02:25]
So we're gonna actually have to clone repository, which good thing Nina did her thing, so now we can go out and clone what we need to do. All right, so pull back your terminal, in case you, I don't think Nina went over this, but like. So say I have a whole bunch of stuff on my screen and I wanna clear it out, if you just type clear, it's gone.

[00:02:47]
So.
>> Brian Holt: Let's just go to desktop. So if you're on a Mac, that'll work. So here on our desktop, we still have some of Nina's folders on here. We're gonna go out and clone one of the repositories that I've already written for you, so let's go back to GitHub real quick.

[00:03:10]

>> Brian Holt: Okay, gitHubbtholt, and it's gonna be, if you can just go to my user profile, it's not in here, so if you go to my repositories, intro-to-webdev-app, that's what I'm looking for. github.com/btholt/intro-to-webdev-app.
>> Brian Holt: So we're gonna come down here to this SSH level, or like click the copy, right here.

[00:03:42]
We're gonna go back to our terminal and we're gonna say git clone, now typically, like Nina had you fork it, in reality, you guys, I don't think anyway. You're not gonna be pushing code back to my repository. So you can just clone it straight from my repository and that's fine.

[00:04:00]
The only reason that you would fork is like, I wanna make changes to this and then I wanna commit my changes back to Brian. So we're just gonna do git clone, we're gonna paste that, and we're gonna let it clone onto our computer. So now if you look, intro to webdev app is there and we're gonna go into that.

[00:04:21]
Anyone have any issues with that? Seems pretty. Pretty straight forward. So now notice at the readme we have an app, that's gonna be the last part of this workshop, but right now we're just gonna go into the Node exercises.
>> Brian Holt: So just in case you wanted to see what this actually looks like in the finder, this is gonna be a Mac-only command and I'm sorry that I don't know what it is in Linux or in Windows, but you can say open in Mac and then we're gonna say space period which just means this directory.

[00:04:56]
So I'm gonna say, open period. And now you can actually see what it looks like in the finder, which is pretty cool. Or like, it's also my desktop so I could've just double clicked on that too. That would've been fine. Anyway, so we're gonna go into Node exercises.

[00:05:16]
And we're go into basic. That's the first one. Something else I'm not sure Nina talked about, but I'll re-address if she did. So notice I have, like right there, I have basic, I have express, posting, params, cheer-jeer, whatever. I can type ba and if I hit tab, like the, the terminal just knows, like you typed ba.

[00:05:38]
I'm assuming you wanna go into something real. So it just finished it for you. It's really fast cuz we're all lazy. We don't wanna type all the words. So I was like, I'm only typing two letters. So now we have this app.js. So now we're actually start using sublime which is gonna be a out text editor right here, so I guess you need to open this in sublime somehow so you can say sublime, project, where is it, add folder to project?

[00:06:15]
Click that and then you need to go find wherever it is in your computer that you put this. Mine happens to be on my desktop which is right here and then click on the intro to webdev app and click Open.
>> Brian Holt: Can we follow that?
>> Speaker 2: Can you say the path again within the project?

[00:06:40]

>> Brian Holt: So you need to go find where ever you cloned your intro to webdev app and you just need to open that folder.
>> Brian Holt: The entire folder. Nothing inside of it. So I click on this and then I would click open right now. I'm not gonna do it cuz mine actually is already opened to my project.

[00:06:57]

>> Speaker 3: Now, do you have to create a new project first?
>> Brian Holt: You don't have to explicitly do it, if you don't already have a project Sublime just creates one on the fly.
>> [INAUDIBLE]
>> Brian Holt: Is that working for people?
>> [INAUDIBLE]
>> Brian Holt: So something else you can do which is along those lines.

[00:07:23]
If I have this open right here, I can just take this whole folder and drag it on to Sublime which I have right here. That'll work, too.
>> Brian Holt: And if I just do that then it'll open a brand new window with that project opened.
>> Brian Holt: Feeling good about this?

[00:07:50]
This is gonna really suck if you don't have this opened. So I wanna make sure everyone has it open.
>> Speaker 4: [INAUDIBLE]
>> Brian Holt: Do you wanna go help her, Nina?
>> Brian Holt: Everyone else good?
>> Brian Holt: It seems that for the most part, people have it open so let's go ahead and close that out.

[00:08:21]
So we have this nice project open now, and we're gonna go into Node exercises. We have basic right here. That's gonna be our first little exercise we're gonna work on, so open Basic and look at app.js. You should see something akin to this. It might be different colors, but it should look like that.

[00:08:47]

>> Brian Holt: So again, intro to web dev app, node exercise basic app js.
>> Brian Holt: Here, we have like the most basic at the most basic note app, the Hello World. Like the only thing this is ever gonna do is say Hello World. So before we get too much into like what actual code is doing, let's go ahead and run it and see what happens.

[00:09:16]
So again, I'm here now in the basic directory. I'm assuming Node has already been installed because that was one of the prerequisites of the class, so you're gonna type node, okay? And then, or sorry app.js, so you're telling Node run app.js. And you should say server running at that address.

[00:09:47]
Is that happening for most people? Lots of head shaking, I like that. So just grab this http right here, copy that, come back into web browser, paste that right there, should see Hello World on your browser.
>> Brian Holt: Minds being blown right now, you just wrote your first web app which is pretty cool.

[00:10:16]

>> Class: [LAUGH]
>> Brian Holt: Like this is the basis for everything that we're gonna do.
>> Speaker 6: So Node is actually launching a web server locally, is that-
>> Brian Holt: So you now have a web server running on your computer. By the way, if this number looks annoying, it is annoying. You can type localhost, and that works too.

[00:10:39]
That's just letting your computer know please reference yourself. [LAUGH] [SOUND] Okay, cool. Someone's super excited about Node.
>> Class: [LAUGH]
>> Brian Holt: Then, we have this colon 88 at the end, that's just letting the browser know which port to look on. If you don't necessary what ports are something like it has to do with like routing web traffic and something that not a huge deal.

[00:11:10]
But it's necessary, it must be there so please include it. So let's dissect what actually happened here. So I'm gonna put some space in here so we can just see what's going on.
>> Brian Holt: I'll put that on a new line. Okay, so I think this console.log looks really familiar to you.

[00:11:32]
Instead of console.log writing to your webs, your browser's console, it's actually gonna be printing it out straight here. So we see server running at this, and here we say server running here, that's how that's actually happening. Let's talk about require. This is kind of an interesting one, it's unique to Node, as in, you don't actually do this in the browser.

[00:11:57]
Not natively anyway. But we'll just say for right now that you don't do it in the browser. So you're saying to Node, I say Node, I know you have a library called HTTP. Please give it to me. That's what that means. Now, there's quiet a few HTTP one is gonna be the one that were gonna be using today.

[00:12:16]
But there's one like fs for file system like if you needed to read files from your system note includes a bunch of just useful things for you to use. So we're saying go out fetch this HTTP library give it to me, and then we're just gonna use that to create our own little web server.

[00:12:34]
So we're gonna say HTTP, please go ahead and create a web server. And then, that takes just a quick little argument, and if we give the server a function, it's going to return that on literally every request you give to it. So going back to our little browser here, you can put anything after this and it's still gonna say Hello World.

[00:12:59]
Any address, doesn't matter. Either that, or I coded that really long web address in there secretly, but I didn't. So it's fun for toy purposes but it's actually not terribly useful for writing a real webpage.
>> Brian Holt: I do a writeHead. So you remember Nina talking about status codes, right?

[00:13:22]
200 is successful. If I did 404, what would that mean?
>> [INAUDIBLE]
>> Brian Holt: Can't find the page. But we want everything to be found, so we're giving 200s out. And then, we're writing this Content-Type. So you have to let the browser know what you're giving it because the browser has a bunch of different modes it goes into to render different things.

[00:13:45]
In this case, it's just like, we're just sending you actual text. Typically we're gonna be sending things like HTML or CSS or in our little app we're about to do JSON. So here, just saying your content type is text/plain. And then, there's one called end and that's essentially saying I'm going to end my request.

[00:14:08]
Here, is what I'm going to give back to the user. So res stands for response, req stands for request, we'll actually get into requests later, but right now, we're just worried about res or response. So it's saying, please end this response, and tell them Hello World finished. Once you call end you can't actually send anymore, cuz it actually wraps up all of your data and sends it back.

[00:14:31]
So just keep that in mind, once it called end, it really is the end. We have this listen. This is where chaining again, if you remember that. .listen on port 8080 which is where that business comes from. This is really can be an arbitrary number. Just make it over 1,000.

[00:14:51]
It'll make your life easier. It can be lower, but just do that. And this is essentially saying you're gonna be on localhost. Which is that number. That's, 127.0.0.1 just refers to yourself if you're a computer, so it refers to this computer right here, I'm gonna be running my server on here.

[00:15:10]
It's a magic number, wouldn't worry too much about what it means or where it comes from, in fact I'm not really sure. So that's why I'm not gonna tell you about it. And that is the anatomy of the app that we just wrote.

