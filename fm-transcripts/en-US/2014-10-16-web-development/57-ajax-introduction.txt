[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: So AJAX, this is a really powerful pattern, it's hard. So just for warning there. It stands for Asynchronous JavaScript and XML which is a misnomer. It's really just a name that stuck, everyone calls it AJAX, I would say most people don't even know that that's actually what AJAX stands for.

[00:00:25]
[COUGH] And so, it's just a buzz word that stuck, and what it really means is like, so imagine when you load a page, your computer reaches out to the server, the server gives you back HTML, CSS, and JavaScript to load on your page. That's kind of the pattern that we're used, there's another pattern that you make an asynchronous call or in other words it's like you've loaded your page and you want your JavaScript to reach out to your server again without refreshing the page.

[00:00:55]
That process is called AJAX. So I'm on a page, I say, imagine an infinite scroll on a product pitch. In fact, let's just go ahead and look at one. Going back to redditgifts/marketplace/feed. So here we have this feed of products. And if you scroll down, it loads more.

[00:01:26]
So we're not refreshing the page it's just, this particular page is reaching out to the server again and getting more and more data. I mean, it teach you how to do this technique right now.
>> Brian Holt: So we're gonna look at two different APIs over the course of this.

[00:01:45]
We're gonna look at Meetups. If you're not familiar with Meetup, it's essentially that they plan meetups and they help people make meetups. They have an API that's just a joy to use. So we're gonna use that one. And then of course, we work for Reddit so we're gonna use the Reddit API.

[00:02:04]
It's gonna be fun.
>> Brian Holt: Let's keep going here.
>> Brian Holt: AJAX is kind of a pain in the butt to be totally honest, but AJAX with jQuery is really simple so we're just gonna do it with jQuery.
>> Brian Holt: Let's just jump into an example.
>> Brian Holt: So again, click me, replace me, HTML is pretty simple here.

[00:02:39]
Let's just go ahead and expand this one out.
>> Brian Holt: So I'll show you first of all what it does. It just, you click it and it just like barfs all over the page all of this data. That's what's happening here. Let's just refresh the page. So you can see why that's happening the way it is.

[00:03:02]

>> Brian Holt: So button click. The button refers to this click new right here. The .text refers to this replacement right here and announce that as soon as the button is clicked, I indicated these are that we're loading. I just change the text to say loading. And then, I call this .ajax method.

[00:03:22]
And .ajax takes this, it's call a configuration object. Like we talk about objects that have properties for just feeding in an object that has a bunch of values on it. So we gonna do a GET, which I'll explain here in just a second. We're gonna reach up this url which is api,meetup.com.

[00:03:40]
Like this is like, again I can just put this up on my browser and it will work.
>> Brian Holt: It's just a bunch of raw data.
>> Brian Holt: In fact, this is a great time to go over what this actually is. This is called JSON JavaScript object notation. It should actually look pretty familiar to you.

[00:04:07]
It looks a lot like JavaScript. So we have this like, results which is an array. So that's what those two square brackets mean. And so, it's an array of objects, which you see these curly braces now, and it just, all these curly braces have different properties of them.

[00:04:27]
Each one of them is representing a city. In this particular case, so we have Phoenix, Scottsdale, Mason, I bet you that's because my VPN is connected. So my VPN actually thinks I'm in Arizona right now. But if I disconnect my VPN, and I refresh this, now it thinks I'm in Minneapolis.

[00:04:48]
So Minneapolis, Saint Paul, Eden, I just went to a close city.
>> Male Student 1: One thing to note, I think you have a plugin that makes it kinda pretty prints it.
>> Brian Holt: It did, I do.
>> Male Student 1: So-
>> Brian Holt: So if you go to this, I imagine a lot of you are seeing this.

[00:05:02]
That's just like a blah throw up of data. I have a Chrome extension installed. I can't remember what it's called. But it's like JSON Prettify or something like that, that makes it nice and easy to look at.
>> Brian Holt: Great. So this is kinda make sense [INAUDIBLE] JSON, it's just it's away for two desperate entities to communicate with each other, it's essentially computer talk.

[00:05:31]
That the client can reach out to the server and say, I want this data from you and then like the server says, okay, here's your data, it's a language that the two computers can speak back and forth. And it looks like JavaScript, it looks like normal JavaScript. So let's go back here to our jQuery.

[00:05:52]
So we're calling .ajax and it's doing what's called a get request. They're varying http verbs. So I reach out to the server, and the server says like, what do you want? And if you say, I want to get this from you, it gives you back something. If you say, I want to post to you, it's like I'm giving you data to do something with, which we're gonna do here in just a sec.

[00:06:18]
And there's like five or six or actually probably more other verbs but those are the two that we're gonna concern with ourselves today, get and posts. So that get is just saying, please give me data back. We have the URL, I think that makes sense, that's where we want to reach out to, and then we have this success.

[00:06:39]
So that's essentially saying once this is successful, please run this. So this is called asynchronous programming. Because, this, we'll call this. And reaching out to a server is not instant. There's the round trip that has to happen. I have to say, hey, I want this, it has to go across the great Interwebs and then it has to go to the servers.

[00:07:03]
The server has to run its processing and then it has to flow back to you. That is not instant, in fact often it can take on the order of several seconds. We have now introduced what's called a synchrony. This is calling but we don't want our entire program to get blocked.

[00:07:21]
We don't wanna just have this user sit there and wait while this is trying to happen. We want to be able to execute more code, we want more things to be able to happen. So essentially what we're saying is run this and then whenever this happens, whenever like the Interwebs gods give us back our data run this function.

[00:07:40]
So we've kinda actually already done asynchronous programming. In fact, right here, is this click function. We have no idea when this functions actually going to occur. It only happens once the user does something. But it doesn't happen until then. That's exactly what this AJAX function is doing as well.

[00:07:59]
It's saying, I don't know when the data is gonna come back, but once the data does come back, do this. Yeah?
>> Male Student 1: What's the difference between passing an object or a function to a method?
>> Brian Holt: It depends on what the function wants/needs. Some functions expect objects, expect variables, it depends on what the function is.

[00:08:28]
I think the AJAX function can work multiple ways. I've just found this way to be the most easy to explain. So we went with that.
>> Brian Holt: On a high level, not getting too nitty gritty in the details, does this make sense, what's actually happening here. Yeah?
>> Male Student 2: So can you have a time out of fail as well as a success?

[00:08:50]

>> Brian Holt: Absolutely. So there's an error function. There's also a possibility that you can reach out to the server and, no, the Internet got destroyed and now the state is not gonna come back and you need to do something. You can't just have your whole program fail. You need to tell the user, crap, I can't get your data for you.

[00:09:10]
We're not gonna necessarily go into error handling right now but that's something that does happen, should happen and you should do. We're just not going to. [LAUGH] Sorry. [LAUGH] So I believe that the value is called error. I think is just like and it's another function like it's running case the error happens.

[00:09:32]
Cuz you have you gonna handler it differently.
>> Brian Holt: And then, this should look formal too, it's like I'm just taking the data. The data is whatever is coming back from the server. And I'm just setting that to be text. So JSON, we were just talking about that, JavaScript Object Notation.

[00:09:52]
Basically I'm taking an object the server has given back to me, and I'm saying I just actually wanna dump it out. If I didn't do this it would just say Object Object. So just so you know why I'm doing that.
>> Brian Holt: Maybe. Yeah, it says Object Object because I'm trying to print out an object.

[00:10:16]
An object doesn't know how to display itself. So in this particular case I just put in JSON.stringfiy to make this into a string so that I can display it on the page. That's all that's doing.
>> Female Student 1: Sorry, did you explain what JSON was in that datatype, or?
>> Brian Holt: So JSON is like this.

[00:10:37]
It's this information interchange format.
>> Brian Holt: And that's what it really looks like. It's just-
>> Male Student 2: It's just a bunch of data, right?
>> Brian Holt: It's a bunch of raw data. It's not really meant for human consumption. It's meant for a computer consumption. I have up here this thing that lets me see all pretty and nice so that I actually can read it.

[00:11:01]

>> Male Student 2: So really all that capital JSON is doing is saying this is a JSON object And now you can have all these [INAUDIBLE] you can actually use them.
>> Brian Holt: Exactly. In this particular case, it's saying please make this so I can print it out to my page. You actually would never do this in real life.

[00:11:17]
You don't wanna show people raw JASON because they're [COUGH] probably gonna say the same things you're probably saying right now, what the hell is this? [LAUGH]
So yeah, don't do that. This is just purely for debugging, demonstrative practice. And then, just to touch on what jsonp is, I don't wanna go into depth in it, but suffice to say that this call won't work without jsonp.

[00:11:44]
It's how the made up API works. And it has to do with how the data is loaded back onto your computer. So don't worry too much about it. It's only useful when it's useful. And I'd say most the time it's actually not useful. But if you're gonna mess with Meetup API, you do have to use their jsonp.

[00:12:07]

>> Brian Holt: And when we get into the Reddit API, we will not be using it so. Cool.
>> Male Student 2: And the API that you're talking about those are just sources of data?
>> Brian Holt: Yeah, that's a good point, I should talk about that. API stands for Application Programming Interface. That sounds right.

[00:12:26]
That sounds smart let's go with that. [LAUGH] So essentially it's saying like I've written this program for example Meetup has written this program that they have all these cool things that there program can do but they need a way for other computers to talk to their computers. So essentially, they've sent up like here's our interface.

[00:12:47]
If you want to this with our program, like if you wanna create a new meetup, send us this data. If you want to get all of our city data, which is what we're doing right here, please call this URL with these parameters. It's just kind of this interface for two disparate services to talk to each other.

[00:13:05]
That's what the word API refers to. So in this particular case, we're calling this API which is the cities API on the Meetup server and saying, please give me all of your cities. That's kind of the general gist of it.
>> Brian Holt: And here, that's the data that is gonna come back from the server.

