[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: We're gonna have an exercise with cheer and jeer, right? Make an app that has two routes, which is essentially, we're gonna make an app that has two gits, right? We're gonna have one that's called cheer.txt and jeer.txt. Cheer should send something back positive to say, and jeer sends something back quite negative.

[00:00:25]
The solution is in cheer and jeer, and remember you're gonna have to reinstall express in this new folder.
>> Brian Holt: Okay? So, let's just get on to it.
>> Brian Holt: The whole solution is here in cheer and jeer, but we're actually just gonna go ahead and create a new folder, and call it exercise, or whatever you want to call it.

[00:00:54]
Okay, here, we're gonna have a new file. We're gonna save it, and it's gonna be called app.js, okay? And then we'll have to go back here to our
>> Brian Holt: Get out of here, and we're gonna go into our exercise folder, right? And we're gonna do npm install express, just like we did before.

[00:01:24]

>> Speaker 2: There's a question on why you were saving the app server variables.
>> Brian Holt: Well, you definitely have to save the app variable, because using the app variable is how you create the server variable. The server variable, force of habit, I don't know if I necessarily have a good reason for it.

[00:01:44]
It's just kind of common practice. I'm sure it's useful, but I don't know why it's useful.
>> Brian Holt: Okay, so what I did here is I just did npm install express, that's all I did. Okay, let's go back to our code here. You'll notice that in our exercise folder, we now have the node_modules, right?

[00:02:09]
So, here we gonna say var express = require, express, okay? And then, var app = express, pretty straightforward so far. We're gonna say app.get, and we're gonna say /cheer.txt, function, req, res. If you want to be verbose, request and response, we'll do that at this time just for fun.

[00:02:46]

>> Brian Holt: Okay? And then you're just gonna say request, or sorry, response.end, You have quite lovely eyes.
>> Brian Holt: Okay? Pretty simple, can imagine jeer will be quite similar.
>> Brian Holt: Okay, response.end, I don't even know. Everything that comes to mind is offensive, so.
>> Speaker 2: You're mother was a hamster.
>> Brian Holt: Your mother was indeed a hamster.

[00:03:29]
[LAUGH] Thank you.
>> Brian Holt: All right.
>> Brian Holt: After this, we're gonna say our server, equals app., see, like I can't even remember the syntax off the top of my head, so let's just go ahead and grab it from the basic, or from express.
>> Brian Holt: Yeah, that. You are free to just go ahead and copy and paste that cuz literally it's not gonna change.

[00:04:17]

>> Brian Holt: Very common practice, by the way, is like, I know I've done this before, just go out, see what you've done, and go grab it. Okay? Feeling pretty good about that?
>> Brian Holt: [LAUGH] Apparently not [LAUGH].
>> Brian Holt: Is there any questions about what's going on here?
>> Brian Holt: Hopefully pretty straight forward.

[00:04:54]

>> Speaker 2: Can you walk through it again?
>> Brian Holt: Sure, bringing in express right here. And then creating an instance of express, okay? And then we're doing an app.get, which is essentially defining a new route. So if you go to cheer.txt here, or if you go to jeer.txt, right, they're gonna get different responses, then we're giving a call back function.

[00:05:16]
Call back function, or in this case, an anonymous function, right?
>> Brian Holt: And this function is essentially, I want you to do this when they reach this route. So if they go to cheer.txt, please run this function. Here we're doing response, right, response.end, which means please send them back this response if they reach this route.

[00:05:47]
And we just did that twice. So we defined two routes.
>> Brian Holt: And in here, we just instantiate the server.
>> Brian Holt: Make sense?
>> Speaker 2: That makes sense.
>> Brian Holt: Cool, well let's see what it does. If you want to keep following along, the whole answer is in the cheer and jeer folder.

[00:06:20]

>> Brian Holt: That shirt doesn't look awful on you. I'm a jerk. I'm pretty sure your scent is unpleasant [LAUGH]. I totally remember writing that. But something worthwhile of noting is like right here, I'm just saying app.listen, right? You actually don't have to have this function right here. It's just kind of useful.

[00:06:42]
You can see in the command line, your server actually did start. But these are essentially equivalent.
>> Brian Holt: Okay.
>> Brian Holt: So, we're gonna say, nodemon app.js. It's listening on port 8080.
>> Brian Holt: Okay, and we're gonna go to cheer.txt. You have quite lovely eyes. Your browser is admiring you.
>> Brian Holt: And jeer, your mother was indeed a hamster [LAUGH].

[00:07:24]

>> Brian Holt: Cool.
>> Brian Holt: Questions about that? Seems, hopefully
>> Brian Holt: Good stuff, right?
>> Brian Holt: So let's just remove that, don't save.
>> Brian Holt: So, this is the one we just wrote.
>> Brian Holt: Again, this is like, writing a server site JavaScript is not easy.

