[00:00:00]
>> [MUSIC]

[00:00:04]
>> Brian Holt: We've now seen how to install a global tool for node. That's what that -g means. It means I wanna be able to use this from anywhere on my computer. That's the last one I'm going to install that way. Everything else is going to be installed locally. So it's only gonna be available in very small parts of your computer.

[00:00:22]
In this particular case, it's gonna be available in our little apps.
>> Brian Holt: Okay.
>> Brian Holt: Yeah, we kinda went through that, that -g, means it's global. All right. So, [COUGH] we just built our first and last app using just vanilla node, why? It's actually really hard to write just plain node.

[00:00:51]
As in like it's kind of beyond me even. Or at least I haven't ever tried. So, like jQuery there's something called Express that exists for node. Express is certainly not the only framework that you can use, but it's certainly the most common one. And it's just like a design to make writing a node server like a billion times easier.

[00:01:12]
Kinda like I said a billion, maybe a trillion. Okay, so go back to your Sublime.
>> Brian Holt: I don't know if you've noticed but I'm certainly not prone to hyperbole, okay so we're gonna be in Express okay.
>> Brian Holt: So, come back to your little command line right here. We're gonna get out of here so I'm gonna hit cd..

[00:01:44]
We're back in our node exercises and we can say, okay and now we need to go to express, okay. Here, we're gonna type npm install, very key here do not put -g. I'm gonna repeat that, do not put -g express, okay. Just like that, npm install express.
>> Brian Holt: Again, much is going to happen if you get permission errors again which hopefully at this time you will not, then go ahead and throw sudo before that again.

[00:02:22]

>> Brian Holt: But that should look something like that. That look good for people.
>> Speaker 3: Can you show that command line again?
>> Brian Holt: Yeah, so it's just gonna be npn install express.
>> Brian Holt: If you're lazy like me, you can actually shorten this down to npn i and that works too.

[00:02:44]

>> Speaker 3: Why wouldn't you install that globally?
>> Brian Holt: There's an idea, a philosophy in node. That everything should be totally and completely self contained. So if I have three apps, all of them are using Express, they're not necessarily gonna use the same version of Express cuz Express is actually updated pretty regularly.

[00:03:03]
And so I don't wanna have to update all of my apps just because I wanna update one of them. So they each can carry their own dependencies.
>> Speaker 3: So that means going in every private directory and you have to expressly install Express.
>> Brian Holt: Which is, again, it's something you do once, when you start a project, and then you work on project for six months, you don't care, right?

[00:03:28]

>> Brian Holt: I'm a huge proponent of this, so, I think it's a great thing.
>> Brian Holt: Okay, cool we got Express going now?
>> Speaker 3: Were you in a different folder or was it the same? Folder?
>> Brian Holt: Yeah, so we're in the Express folder now.
>> Speaker 2: One question is when do you use the save play?

[00:03:50]

>> Brian Holt: We'll talk about it.
>> Speaker 2: Okay.
>> Brian Holt: Coming up. So we were in Basic, right? We have now moved on to Express. So I got into the Express directory.
>> Brian Holt: You should now see this little node_modules folder. We didn't create that, but guess what, surprise it's there. That's where npn keeps all the code that it brings in.

[00:04:16]
In fact, if you look in node_modules, you'll see that there's a folder called express. If you look in express, you'll see that it has a lot of code that to look at it, like you don't have to, but it's there.
>> Brian Holt: Feeling good?
>> Brian Holt: So, let's go back to our code here.

[00:04:46]
We now are in Express. We're looking at the app.js that's inside of Express, okay. So you notice the first thing rather than requiring HTTP, we're requiring Express. So again to [COUGH] reiterate how node is going to work with this, you're gonna say give me Express. It's first gonna go see, do I node, personally do I own anything called Express?

[00:05:14]
I don't. So I'm going to go look at his externally installed npn type stuff and see if it's out there. It's gonna find Express in there, and it's gonna bring that into our project here in this express variable. So that we we've installed npn, through npn Express, it's now available to us because we installed it.

[00:05:37]
So now we have Express right here, and here, we're going to create an instance of Express using this Express function. If it looks kind of weird. It is kind of an interesting pattern but anyway. This is the app here is now how we are going to operate our web server, okay.

[00:05:59]
So, you remember how we were talking about HTTP verbs like get and post? We're gonna say every time that someone calls a get, which is what this get right here means, on hello.txt, this req and res should look familiar to you, right? Please send them Hello World, okay.

[00:06:21]
This is essentially the same app that we wrote before, but now on Express.
>> Brian Holt: Questions about this?
>> Brian Holt: So again, well, not again. For the first time, rather. Server, is an instance of the app that we've created, we've essentially setup the entire app right here and then we get the server running here and say app.listen, and that's when actually the server starts going.

[00:06:49]
If we took this part out right here, we essentially configure a server and then it would never run. This part you're essentially saying, I've configured everything I want to now. Please actually start doing your thing.
>> Brian Holt: Cool? Should we actually see what it does? All right, so. Nodemon app.js.

[00:07:18]

>> Brian Holt: Okay, started running.
>> Brian Holt: And then we're gonna go check out what it does in the browser.
>> Brian Holt: So first of all we have to go to hello.txt because that's what we set it up as. Now we see a Hello World here. What will be interesting, try doing it with something else or just like an empty.

[00:07:47]
If we do this, it's going to say cannot GET. Or if you go to this, it's gonna say cannot GET that. Let's talk about why for just a second. That pattern of giving, essentially throwing up anytime someone asks for anything is like hey, I want this and you say, no you get this.

[00:08:08]
And it just every request given that. We actually wanna route specific things to specific places, right? Like you want your index to be different than your about page, then you want the about like contact page, right? You wanna have different routes on your web server. And that's what this makes this really easy, right?

[00:08:24]
And we just say any time they go to mywebsite/hello.txt, serve them Hello World.
>> Brian Holt: We follow, does that make sense? You can change it to be something else. It can be like, thing.txt and then if you saved it, restarts, come back over here. thing.txt, now it's being served there.

[00:08:50]

>> Brian Holt: Cool, makes sense? It's just like another way of doing the same thing.
>> Speaker 3: Is the structure then that you would have a lot of get functions for all the different pages and at the end you would have the server?
>> Brian Holt: Yep, that's really good, in fact that's the structure that we'll see at least throughout our class today.

[00:09:10]
And we'll actually even get into posting, which will be different than a get, right?

