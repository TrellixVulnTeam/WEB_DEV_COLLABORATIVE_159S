[00:00:00]
>> [MUSIC]

[00:00:04]
>> Nina Zakharenko: So git status is saying that I have an untracked file. That means this is a file that git knows nothing about, it's never seen it before and you can't do any sort of version control if git doesn't know about it. So the command to add this file to your git repository is pretty straightforward.

[00:00:27]
Just called git add. So that's-
>> Speaker 2: There's a question. Did you actually just create that file?
>> Nina Zakharenko: I did.
>> Speaker 2: He was wondering.
>> Nina Zakharenko: Yeah.
>> Speaker 2: Okay.
>> Nina Zakharenko: So you guys create one of your own.
>> Speaker 3: So, what was the command? Git add, and then the filename?
>> Nina Zakharenko: Do you have a file?

[00:00:44]

>> Speaker 3: No, I don't have a file yet.
>> Nina Zakharenko: Okay. So go ahead and create that file in the directory called pull-requests.
>> Speaker 2: Open the folder, and then-
>> Speaker 3: How do you create the file?
>> Speaker 2: [CROSSTALK] Use a text editor.
>> Nina Zakharenko: Yeah. [CROSSTALK]
>> Speaker 2: Open notepad and then type in-

[00:01:07]

>> Speaker 3: How do you open Explorer?
>> Speaker 2: He's helping him.
>> Nina Zakharenko: So, again, git knows that ninaz.txt is not part of the repository. So I'm gonna type git and then add, and the name of the file.
>> Nina Zakharenko: I'm in the matrix, you guys.
>> Nina Zakharenko: It's all black and green.

[00:01:48]

>> Speaker 3: [INAUDIBLE]
>> Nina Zakharenko: Okay, so, have you guys added your name file to the repository? So, again, we're gonna be running this command after almost everything we do. We're gonna say, git, give me your status. And it's changed. It's like, we have some changes to be committed, and now it knows that we have a new file.

[00:02:20]
So there are two steps in making sure that all your files are version control. The first one is doing this, this git add. And what this does is tells git that there's a new file in the staging area. And the staging area is kinda like a preview. So what's gonna happen when I do the next step?

[00:02:42]
And if I make a new file right now, let's just say
>> Nina Zakharenko: And I do a git status. Git will say, I have a new file, but I also have an untracked file. So, when I do the next command, the next action, it's only, it's called a commit.

[00:03:03]
It's only going to be taken on the files that git is aware of. So, not the untracked files.
>> Nina Zakharenko: So the next step is to do a git commit, which goes ahead and actually puts it in a place where git knows that it can pull it back if you want to look at it later.

[00:03:30]

>> Nina Zakharenko: And the way that we usually do a git commit is by providing a message. So I'll be using the -m flag here and two quotes. And we're gonna put our message inside.
>> Speaker 2: Is there a way you can move that up a little bit?
>> Nina Zakharenko: Sure.
>> Nina Zakharenko: So when I commit this, git's gonna give me a message.

[00:04:15]
It's gonna say one file has changed and one insertion. Now, when I do my git status again, I only see my untracked file. And for now, just for example, I'm going to remove that file. I could just do that in the finder.
>> Nina Zakharenko: Boom, that's gone. So if I run git status again, that file is gone and git is happy.

[00:04:52]
But we have a new message here. Git is saying that my branch is ahead of master by one commit.
>> Nina Zakharenko: So, in this case, origin master is GitHub. That's kind of our grand authority. And git is saying that we have local changes that GitHub does not know about.

[00:05:15]
So in order to push up our changes to GitHub, we're gonna type one last command, and that is git push origin and master.
>> Nina Zakharenko: Does anyone have any questions?
>> Nina Zakharenko: I know this is a lot of information to chew on.
>> Speaker 2: I would make notice that yours is pull request dash one, and everyone else is going to be pull request.

[00:05:52]

>> Nina Zakharenko: Yes. Sorry about that, guys. I did a little bit of a test before.
>> Speaker 3: So it asks for user name
>> Nina Zakharenko: Yes, put in your GitHub user name, and your GitHub password.
>> Nina Zakharenko: Okay.
>> Speaker 4: I hit Enter just get commit with no message.
>> Nina Zakharenko: Okay.
>> Speaker 4: And it's-

[00:06:22]

>> Speaker 2: Now.
>> Nina Zakharenko: Yeah.
>> Speaker 4: [LAUGH]
>> Speaker 2: [INAUDIBLE] escape.
>> Speaker 4: Totally lost.
>> Speaker 2: Hit colon
>> Speaker 2: And then the queue. Then hit Enter.
>> Speaker 4: No write since the last change.
>> Speaker 2: [CROSSTALK]
>> Nina Zakharenko: Is anyone not at this point?
>> Nina Zakharenko: Okay, so the next step, and this one is super important as some of you guys have to pat yourselves on the back cuz this is your first git command.

[00:07:14]
Serious. Okay. So, after we did our git push, our changes are now synchronized with GitHub. Yeah?
>> Speaker 2: Do we want to wait and kinda let everyone catch up?
>> Nina Zakharenko: Yeah, yeah.
>> Speaker 2: People online are kind of, I think, behind.
>> Nina Zakharenko: Definitely. I'll go ahead and wait a few minutes.

[00:07:35]
Does anyone have questions about any of this?
>> Nina Zakharenko: Yes?
>> Speaker 3: So we've just updated my branch.
>> Nina Zakharenko: Yeah.
>> Speaker 3: That I forked on my GitHub.
>> Nina Zakharenko: Yeah, and the reason this is happening is because maybe Brian thinks your changes suck. And he doesn't want them to be part of his repository.

[00:07:57]
That means that he's in ultimate control of what could goes into his own repository. You can do whatever you want with your copy, but he doesn't have to accept it back in to his code.
>> Speaker 2: And you can go make your own projects. You can call, you can fork something and make it into something new.

[00:08:17]

>> Nina Zakharenko: Yeah.
>> Speaker 2: Actually, one project that I created, which was a little jQuery plugin, someone forked it and then made it super popular. So, the fork actually has 500 stars or whatever.
>> Nina Zakharenko: Yeah.
>> Speaker 2: But my main repository that, his was forked from, his is actually the more active and maintained.

[00:08:44]
And so, you can fork something and make it your own. And then it can get popular from there, too.
>> Nina Zakharenko: Yeah, it doesn't ever have to be put back with the branch that it was forked from.
>> Speaker 2: Yeah. It kind of go its own way.

