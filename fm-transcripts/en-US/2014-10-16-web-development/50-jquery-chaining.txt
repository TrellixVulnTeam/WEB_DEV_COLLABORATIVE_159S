[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: Let's us talk about chaining a little bit.
>> Brian Holt: Again same text appears, nothing to change in our HTML. So, let's take a look at this. So, we have text, magic, and CSS background color, and we're setting that to be orange. This effect is called chaining and you'll see it a lot in JavaScript.

[00:00:31]
So I put new lines here. But really what's happening is this. All these periods are next to each other. So .text, and then after that it's returning an object that then is calling .css on. And if we wanted to make this kind of more verbose, what we could do is copy that, hit Enter there.

[00:01:00]
This is equivalent to what we started out with. So we have this caption text right here and we're calling the text method on it and saying magic which you see up here. Then we take the caption text again, we're using the CSS function which as you can imagine lets you modify the CSS on it.

[00:01:18]
And what changes our background color to be orange, right. What people cannot [INAUDIBLE] this is kind of a verbose, like I wanna make a bunch of changes or I want still the same dominos, I eventually made it possible, it's gonna blow up.
>> Brian Holt: They made it possible to do something like this.

[00:01:38]
Whether you could say caption-text right here, and say all right, change the text to 'Magic!' and then after you're done doing that, change the CSS to be background-color orange. That's kinda what's happening here. Does that make sense? Just chaining methods together. You can simulate this pattern yourself because all they are doing is returning this, right?

[00:02:00]
So like let's just write a bit of pseudo code here for a second. Like function text, right? They say like magically change text here, I'm not gonna actually write out how to change text, right. And then the last line of it is return this, right. Because if you think about it, it's returning the object that was called on, so as soon as you return that object that you called on, then you're free to call more methods on it.

[00:02:27]
Or stated differently, caption-text.magic right. And if I said var x equals that, the answer is like what is x right here, x is going to be? ('.caption-text') right here, okay? And then after that we're gonna say, x.css('background-color','blue').
>> Brian Holt: Okay?
>> Brian Holt: So note we store the variable right there, and then we turn around and we call it.

[00:03:15]
We call CSS on that same thing. What this lineup here is doing is cutting out that middleman x variable. I see some blank stares. How do we feel about that? Okay, questions?
>> Speaker 2: So which way is the best practice for the readability? I kind of like the top.

[00:03:38]
The first way.
>> Brian Holt: This is fine. As a general rule I tend to stray away from chaining because I feel like what you're worried about, that it becomes unreadable, happens. The exception I make to that is jQuery because it is such a common practice in the jQuery community.

[00:03:55]
Like this make sense, right, like I have my caption text. Okay I'm gonna modify the text a bit then I'm gonna modify the CSS a bit. That's a line of thought I can follow.
>> Speaker 2: Can you drag the middle bar and just drag it?
>> Brian Holt: Yeah, sorry about that.

[00:04:17]

>> Speaker 3: So do you even need to call x? As soon as I put var space x in front of it, it was like still doing the magic. Like, is it implementing it just by creating a variable?
>> Brian Holt: Right here?
>> Speaker 3: Yeah, if you took out the second one, should it just say magic without the blue?

[00:04:36]
Or, would it say Lorem Ipsum because you haven't actually called x yet?
>> Brian Holt: So you're talking about if I take this one, right?
>> Speaker 3: The next one, no. And it's like if you define it but don't call it, what should happen?
>> Brian Holt: So you're saying if I don't store it right here, it'll still work, is that it?

[00:04:56]

>> Speaker 3: No, I was wondering.
>> Speaker 3: Okay, so I had deleted the first part in mine and I just had var x equals and it's still doing it.
>> Brian Holt: Right, the magic still works.
>> Speaker 3: Yeah so but you haven't called it yet, you've only defined it so why is it putting magic in there instead of the lorem ipsum?

[00:05:19]

>> Brian Holt: Okay, I see what you're getting at, and that's a good question. So, she's asking, I'm calling this function here, it says text magic, and I'm storing it in x, but the effect is still happening. So, like, how is it still happening, if I'm storing it and never doing anything with it?

[00:05:38]
So, it's kind of an interesting answer, the fact, like, this .text function, whether or not you store anything, is going to modify the text, no matter what. That's the point of the text method is to modify it. So, even if you delete this right, it doesn't care if it's been stored or not.

[00:05:59]
So that function is still happening either way.
>> Brian Holt: So, or maybe stated in a different way, that the returned value of this is actually not important to the overall function of it, right? So it's returning itself, but that doesn't matter. Does that kinda make sense a little bit?

[00:06:20]
So this is only important if I wanted to then operate it afterwards. x.css, color, red. Or something like that.
>> Speaker 2: So, because it's a call by reference, when it's called it's actually updating the DOM. It has to be executed to update the value of x. So on its execution, it's updating the DOM.

[00:06:49]

>> Brian Holt: Mm-hm, so again here this and this are equivalent in terms of what's actually happening to the DOM. Here, we're just like saying, it's gonna return to you itself and you're just gonna like, I don't care you're giving yourself back to me. You can just go flood away and I don't care.

[00:07:11]
Here, you're saying like, I do care what you're returning back to me. I wanna keep whatever you're returning back to me.
>> Speaker 4: You're really keeping it even if you don't assign it to another variable cuz it's stored in that global context for chain.
>> Brian Holt: Sure. Okay, so, you can still reference it.

[00:07:31]
If I say later down in the function like I save this again, and say .css. Color red, right? So it's still available to you if you wanna call it again. But you still have to call this function. The reference to what this returns is lost if you don't store it somewhere.

[00:07:52]

>> Speaker 4: But if you take out the semicolon after the first one, the effect is same because you're really doing another call when you do the .css change.
>> Brian Holt: Yes if I want to chain them together I can.
>> Speaker 4: So somewhere in the global context, it is storing the return value of that first function call.

[00:08:12]

>> Brian Holt: I guess. The full answer to that is I'm not exactly sure that the mechanics of how JavaScript is doing it. I don't know if they're storing a reference to it or if they're instantly operating on the return value. That would seem to make sense to me though that there would be a variable storing it somewhere.

[00:08:30]
But as soon as this, so even though I don't have a semicolon here as soon as this line happens I can't come down here and say .color. It's lost after that.

