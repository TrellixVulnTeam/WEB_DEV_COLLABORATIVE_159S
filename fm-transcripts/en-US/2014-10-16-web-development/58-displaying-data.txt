[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: Here, we're gonna use the same API.
>> Brian Holt: Actually I'll just show you what it does first. Okay, so you say click me and like I took that same API and I displayed it's data all nicely. Like this is kind of showing you more real world-ish type of application, right?

[00:00:28]
Like I'm in the city and I wanna see the cities around me, right? I could use their API to figure that out like, Hopkins in the same cloud, I don't know where the hell any of these are so. There's a city called Wyoming, Minnesota? That seems just really dumb to me.

[00:00:46]
Anyway, sorry. I'm just going to rag on your great state here, hold on. Hey, we can even get down into Wisconsin. Okay, so that's what's the going on here. Let's see how we accomplish that. First of all, I'll just show you it. This is not what we're actually talking about, but I just threw on a little bit of lip stick on it, right.

[00:01:07]
I can put a little CSS on it. Give it some border, text align, margins, colors it's better. And you're welcome to take a look at that later if you want to, okay. The html literally has not changed from the last page so don't worry about that. Let's look at what's actually happening here, and it's really not that complicated.

[00:01:34]
So we do that text loading business again, we're doing an API call using ajax, doing a get, hitting the same URL end point and then the only thing that's really changed here is what's happening in the success function, right? So here we're going a four loop, Nina talked a little bit about that yesterday and we're looping over data.results.length.

[00:01:58]
Now you might be wondering where did that .results.length come from. So let's look back here. So results is this part of the data that the API's giving back to me, right? So I can re-reference that by data which is this. Right, data is the entire response and I say .results so .results refers again to this array right here which contains all of the cities.

[00:02:28]
Does this magic connection make sense? Okay, cool. I think this is like, this is like the fun part of programming with me, right. This is the way I actually get to create and do really cool stuff. Okay, .length, Nina talked about that. Like, it's how many elements are in the array.

[00:02:46]
In this particular case, I think we have 57. Nope, 184. Have 184 and then we're just looping over it. So this is gonna get called 184 times, right, right. I wanna see some head nodding. Okay, there we go. Starting at zero because arrays always start at zero, right, always.

[00:03:09]
So if you start at one you're going to miss the first one, okay? So place, that's actually the name of the town we're looking for or the blinks dot blink. We're going to grab the city. So data.results I, right? So we're gonna grab that I place, for example, on the 30th loop through, this would actually be 29.

[00:03:36]
Because it starts at zero. Result number 29. Grab the city. Okay let's go back here, oops. Let's look at one of these. So everyone has a city which is right there and it has a state which is right there, okay? So we're grabbing the city and then I'm just putting a comment space there for nice formatting.

[00:04:00]
And then I'm doing a state which is right there. So, we're just doing city comma state. Okay, and then all I'm doing right here is for using the suspend function that we were discussing before. Because I did text right, it would just replace it every time. In fact, let's just do it to see exactly our actually it be the HTML and it would just be the last one.

[00:04:23]
It would be Cushing, Wisconsin. So that's why we need to use append because we say please preserve what's already there and please add on additional to that. That's it, right? That's pretty cool, isn't it? I think that's pretty cool.
>> Male Student 1: There's more data in the API call that you could display, like the number of members per city.

[00:04:50]

>> Brian Holt: Sure, you could do like. You can show the zipcode. You could show the ID, the country. In this case it's not particularly important.
>> Male Student 2: Is there some mechanism that once you get the results array back that you could figure out what the different, iterate through the different objects that are in there without knowing what they are ahead of time?

[00:05:11]
To find out what members there are in the object.
>> Brian Holt: You certainly could. That would be difficult. I would say even borderline very, very difficult. But I'm not gonna say no. The easiest way to code for something like that is to just exactly what I did right here, just open it up, see what it looks like and then just code for that.

[00:05:30]

>> Male Student 2: Just wondering if you had some data source where the API itself may be dynamic.
>> Brian Holt: Which would be, that'd be a, what's the word I'm looking for, it'd be really difficult to deal with. So let's do a thought exercise. Why not? So we have, let's just say var obj = data.results I right.

[00:05:57]
So this is going to go ahead and grab the ith object. Let's go ahead and comment these out.
>> Brian Holt: Okay, I'm going to show you something called a for in loop. So you're going to say for var prop in obj, so obj this refers to, or maybe let's just call it like cityObject, right?

[00:06:22]
Let's be a little it more verbose, cityObject, okay. And then you're gonna say.
>> Brian Holt: Let's do this, actually.
>> Brian Holt: Will place += and we're gonna say prop.
>> Brian Holt: And going to say city object, prop and then plus space. This should get really long and really ugly really quick but let's see how this looks.

[00:07:22]
And then we're gonna say here just gonna say var place = empty string.
>> Brian Holt: And then you have to say if city object has own property. So, I mean this got a little big more complicated than I was anticipating, but this is kind of how you would deal with an object that you don't know what's going to be in there.

[00:07:54]

>> Brian Holt: Geez, what happened there?
>> Brian Holt: So, if this doesn't make sense to you, it's cool, this, we got a little advanced.
>> Brian Holt: Okay, but notice we now have the ID, we have the zip, we have the distance, we have everything that's in there. So what does for in loop does is it loops over an object and it says give me all of your properties right.

[00:08:24]
So in this particular case, prop is ID zip distance lawn member count, right? And then you have to, because of JavaScript's weird inheritance, you have to ask is this actually yours, or is this your parent's? [LAUGH] Sounds like a child, right? Is this really yours? Are you 18?

[00:08:44]
So you have to say is this actually yours or does this belong somewhere up higher? Again we're not talking about inheritance so if that doesn't make sense, just, yeah, don't worry about it too much about it. There here we're just putting the prop first which is the ID, zip, then we are putting a dash.

[00:09:02]
Then we are putting, we are asking for what is the value of that prop. Cuz these are all key values right so there's country which is the prop and then this is the city object with the square braces property. Okay, did we just go off the total defend right there or is that make some sense to most of you?

[00:09:24]
Cool.

