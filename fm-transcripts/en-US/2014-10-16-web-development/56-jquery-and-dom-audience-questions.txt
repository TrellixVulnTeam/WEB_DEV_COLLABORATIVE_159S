[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: We've been using just part of the jQuery library so far. Like I said, the jQuery library is huge, and the DOM manipulation part of it, while it is the most prevalent and the most well used part of it, we will be talking about another part which is called Ajax here in just one second, but we have some other questions to address.

[00:00:26]

>> Speaker 2: The first one is, why would you use jQuery to add and remove styling classes, versus changing CSS directly?
>> Brian Holt: That's a great question, and the answer comes in the form of it's reusable. So, if you're just changing CSS in the JavaScript, it's kind of an anti-pattern and when I say anti-pattern it means it's just not a good idea.

[00:00:46]
Because if I put it into a CSS class and then add and remove a class, I can now use that everywhere on my website, right? For example, if I have an error class that jQuery adds and removes, what happens if I load a page with an error class, right?

[00:01:04]
Then I kind of have bifurcated my efforts here, that I have to maintain both the jQuery CSS and this other class that mean essentially the same thing. Whereas, if I just add or remove classes, it's all available always to be used across their entire website. Laziness, that's my key answer right there.

[00:01:25]

>> Speaker 2: And then the next question was, does the hidden element still take up space then.
>> Brian Holt: So we saw this yesterday when we talked about CSS. The answer is no to that question. When you set display to be none it essentially takes the entire element out of the document flow so it essentially has no bearing on the DOM itself.

[00:01:49]
Good question, though.
>> Speaker 3: Well, it's still there, right, cuz you could just switch that to not be hidden, and it would appear.
>> Brian Holt: Exactly.
>> Speaker 3: Essentially go re-download that piece, so it's still there.
>> Brian Holt: It is still there, correct, definitely. You just have to say display block or display inline or whatever it's supposed to be and it would show back up.

[00:02:10]
Or in this particular case you would just say show. Yeah, it's still there. It's just not making any manifestation of itself, cool.
>> Speaker 4: Question, did I miss explanation of the DOM in detail, kind of what happens with jQuery pulling stuff out of the DOM, did you explain that?

[00:02:34]

>> Brian Holt: Not a whole lot, the DOM is a complicated beast, and as supposed to diving in and getting really confusing about it. I think it's better to just kind of take a surface, kind of take it as a black box right now and say, this is very complicated but here's a couple buttons I know if I can press and it will do certain things for me, but-

[00:02:57]

>> Speaker 3: There's an article on CSS Trader called What is the DOM? And it kinda explains it very laymen's terms. It's basically a tree-like structure, and there's these elements.
>> Brian Holt: But when jQuery pulls something out of it, does it insert something back into that DOM that's kind of a new HTML format or file?

[00:03:22]

>> Speaker 3: Well, when you use the jQuery object you're just wrapping the element in the jQuery object so it's not taking it out of the DOM in order to modify it. It's just doing it jQuery's way, right. It's not really like taking it out. If you say .remove that will take it out of the DOM but-

[00:03:45]

>> Brian Holt: So the simple answer to, I think what you're confusing here is that, when I say get the user input, right. It's not actually yanking it out of the DOM, it's actually just pointing at it. It's pointing at it where it is right now. So it's just referencing what's already there.

[00:04:04]
It's not pulling it out, messing with it and putting it back. It's just changing it in its place. Does that make sense?
>> Speaker 4: Okay, yeah.
>> Brian Holt: Cool.

