[00:00:00]
>> [MUSIC]

[00:00:03]
>> Brian Holt: I think online I'm trying to check but I think everyone is kind of has a clone book list.
>> Nina Zakharenko: Okay.
>> Brian Holt: So at that point you're kind of maybe you could start walk through that again. And if you could start with the whole processes. And explain like once you clone, how do you get into that directory.

[00:00:17]

>> Nina Zakharenko: Absolutely, is it the Windows folks that are having trouble because?
>> Brian Holt: I think it's a little bit of both I think they just didn't understand after cloning that you had to get into that directory.
>> Nina Zakharenko: Okay.
>> Brian Holt: I believe.
>> Nina Zakharenko: So I'm gonna take a stab at doing this on Windows, nobody is allowed to laugh at me.

[00:00:38]

>> Brian Holt: And then one quick question, can you explain difference between add, admit and push?
>> Nina Zakharenko: Yes, yeah. So I'm gonna open up my, open up not the get GUI. I'm gonna open up my.
>> Nina Zakharenko: My get bash.
>> Nina Zakharenko: And that is see, oop, boy.
>> Speaker 3: So if we want to put our name files into your project.

[00:01:13]

>> Brian Holt: She'll go over that, just a sec. What's the next step?
>> Nina Zakharenko: Next step, all right so here we got our git bash open and even though we doing Windows, we can use all of our Linux commands here.
>> Nina Zakharenko: Simple app though.
>> Brian Holt: I'm on to you.
>> Nina Zakharenko: [LAUGH]

[00:01:44]

>> Brian Holt: Which one of you was it?
>> Speaker 3: Me on Windows ViewPoint.
>> Brian Holt: [LAUGH]
>> Speaker 3: That's like 80% of the class.
>> Brian Holt: [LAUGH]
>> Nina Zakharenko: I know.
>> Brian Holt: Yeah.
>> Nina Zakharenko: We weren't even gonna cover Windows originally. And then we sent out the survey and we were like okay there's still Windows users out there.

[00:02:01]
You guys exist. You're not just a myth.
>> Nina Zakharenko: So the very first thing that we wanna do is type PWD, that's gonna tell us what directory we're in, so when I type PWD I can see that right now I'm in c/users/Brian Holt directory. Let's do a dir here and see what folders we have.

[00:02:30]
An OS here and see what folders we have. So we have some local settings. We have some links. But here we also have a desktop folder. So, I'm going to CD into my desktop folder, and say PWD again. And now I can see that I'm in C/Users/Brian Holt, which is the username for this Windows machine, and Desktop.

[00:03:10]

>> [INAUDIBLE]
>> Nina Zakharenko: So now I'm going to grab, I forked Brian's repository, I have my own copy here. Going to grab this clone URL go back to my Windows and say git clone and I don't know how to paste on Windows. Let's see.
>> Speaker 3: Right click in there.

[00:03:40]

>> Nina Zakharenko: Now it don't in the.
>> Nina Zakharenko: You don't? Okay, all right so we got, I'm just gonna type in this URL here.
>> Nina Zakharenko: My right click isn't working.
>> Nina Zakharenko: So github.com/nin-test/pull-requests1.git.
>> Brian Holt: It's dash one
>> Nina Zakharenko: Oops, come on Windows magnifier thingy. -1.git and like Brian said yours will just be named pull-request.git so now if I type is gere I have a pull request one directory.

[00:04:49]
So, I can c-d into pull request one. And do an l-s.
>> Brian Holt: -1.
>> Nina Zakharenko: -1.
>> Brian Holt: dot dot cd dot dot. Okay there you go.
>> Nina Zakharenko: There you go.
>> Nina Zakharenko: And here because I'm using the same account my ninaz.txt is just right here.
>> Brian Holt: Create a new one.

[00:05:14]

>> Nina Zakharenko: But let's say that's gone. No more ninaz.txt. So I think with Windows what I can do is open up this explorer thing here. Navigate to me, let's see.
>> Nina Zakharenko: Navigate to my desktop. Navigate to this pull-requests1 directory. And let's see, oops.
>> Nina Zakharenko: Sorry you guys it's hard to navigate with this magnification stuff.

[00:05:55]
So I'm gonna find the text tool which is probably Notepad. Nope, all right Windows people, how do I make a text file on this thing?
>> Brian Holt: Just type notepad.
>> Speaker 3: Right there.
>> Nina Zakharenko: [LAUGH] Boom, wow, this is, fine work of technology.
>> Brian Holt: [LAUGH]
>> Nina Zakharenko: We got our Windows Notepad.

[00:06:22]
So, I'm going to type my fun fact, and I'm gonna save it, save as go to my desktop. Go to my desktop, go to my
>> Nina Zakharenko: pull-request-1 directory and save this file as Nina.txt.
>> Nina Zakharenko: So now I'm gonna close this guy. I'm gonna close my.
>> Speaker 4: Since that file is the same name is the one that was originally in the master.

[00:07:10]
Are you gonna get a conflict now? [CROSSTALK]
>> Brian Holt: It's Nina, it's just Nina, not Ninaz.
>> Nina Zakharenko: So okay, I drag this window. And decides to attach itself places, that's fun.
>> Nina Zakharenko: Okay, so now if I do an LS, my nina.txt file is there now.
>> Nina Zakharenko: Are people online following along?

[00:07:46]
Are there any more questions?
>> Brian Holt: There haven't been any more questions, so so far, so good.
>> Nina Zakharenko: Okay, I can Windows and so can you.
>> Brian Holt: [LAUGH]
>> Nina Zakharenko: So let's run this git status command which we'll really be running after any git action we take. Okay it's mad at me.

[00:08:08]
It says that I've deleted ninaz dot txt. No changes staged for commit. And I have an untracked file.
>> Nina Zakharenko: So,
>> Nina Zakharenko: I'm going to git add nina.txt, and do my git status again. Cool, I have a green one. These changes are going to be committed.
>> Nina Zakharenko: So in order to commit that file, we do a git commit -m, and we're gonna put a message in quotes.

[00:08:54]
So I'm gonna say "I messed up". Here's another file. Once I commit this file it's out of the staging area. Git's no longer telling me this is what's going to happen with which files. It's like okay I did it. Right now your staging area is empty and this file has moved over into being committed.

[00:09:22]

>> Nina Zakharenko: Oops,
>> Nina Zakharenko: So if any of you guys got this message, I'm gonna go ahead and do exactly what Git is telling me. And it's saying it doesn't know who I am. So I'm just going to copy the commands that it printed out for me.
>> Nina Zakharenko: So this is saying Git doesn't know who you are.

[00:10:14]
Once you run these commands the email address and the name that you put in here are going to be associated with your Git commands. So don't put Seamore Butt in here. I'm gonna do this commit again and it went through just fine. If you want to see a history of your commands we're not going to go too much in depth into this on the command line.

[00:10:44]
But you can type git and then log.
>> Nina Zakharenko: And git shows you all of your commits.
>> Speaker 4: Does that commit then also commit the deletion of the other file?
>> Nina Zakharenko: No, because it was not in my staging area.
>> Nina Zakharenko: The deletion of that file, let me do that again, git status.

[00:11:07]
It's deleted but when I do my git status it's saying that this change is not staged for commit.
>> Brian Holt: You have to actually type.
>> Speaker 3: You have to do git rm and then the file name and then that would stage it to be removed from master.
>> Nina Zakharenko: Yeah, not from master.

[00:11:27]
But from your commit. Well, yes, you can say from master. But your changes wouldn't-
>> Speaker 3: So if you did git rm filename and then commit then it would remove it from the master.
>> Nina Zakharenko: Yes, so I did a git rm. Until I commit my deletion, changes to be committed.

[00:11:53]
Until I commit that file is still, or it's not there but git still knows about it, so.
>> Speaker 4: But as soon as you commit that then it actually is gone.
>> Nina Zakharenko: And the messages that you'll get using git status are actually super, super helpful as long as you can kind of follow along with the git terminology.

[00:12:16]
So under changes to be committed you'll see this message use git reset HEAD which is all in capitals. And then the file to unstage so let's say I did this git rm and I'm like shoot that file was really important. I don't actually want to delete it and then commit it.

[00:12:35]
I can just copy this exact command that git is telling me to type.
>> Nina Zakharenko: And it went ahead and unstaged those changes. So if I do my git status now, it knows that I deleted this file, but it's not going to push that back upstream.
>> Nina Zakharenko: Are all the Windows people caught up?

[00:13:09]
So I did my commit, but the one step that I did not do yet is do a git push origin master.
>> Nina Zakharenko: And this command is gonna sync my changes with my github.com account.

