[00:00:00]
>> [MUSIC]

[00:00:03]
>> Nina Zakharenko: Now we're going to talk about how to make our own git projects. The easiest way of doing this. Is, going back to your GitHub account
>> Nina Zakharenko: And clicking up in this little plus up here.
>> Nina Zakharenko: We're gonna say we want a new repository. So give it a name, GitHub suggest one.

[00:00:38]
So it's like how about you call this Harry hairy-ninja, thanks, GitHub. No spaces or funny characters in here. And we talked about naming conventions. So in HTML you name your classes with dashes. And that same naming convention is usually used for git branches. You can call them whatever you want.

[00:01:02]
But this is the most recognizable way. So I'm gonna call this one my-first-project.
>> Nina Zakharenko: Description is optional. This is important. Public or private. If your code is private, public anyone can see it. If you want your code to be private, you have to pay for it. It gets about five bucks a month.

[00:01:32]
But here's the important part. You can have git initialize this repository for you. A git, a .gitignore, is a file that tells git which files to ignore. Let's say you have a text file and you have a JavaScript file. And the text file has your notes in it, and you don't want it cluttering up the repository.

[00:01:56]
You'd create a .gitignore file and say, ignore all txt files. Now git has created a bunch of .gitignores for you already. Here's a huge list of them. And this will, for example, java generates a bunch of compiled files. You usually don't want them in your directory. So you'll pick this java .gitignore and GitHub will just put it there for you.

[00:02:22]

>> Speaker 2: The None one's good too, we're actually gonna use the None one.
>> Nina Zakharenko: Yeah. License is something you don't really need to worry about right now, but git provides a whole bunch of licenses for you. That it will also add back in. So if you already have a git repository locally, you don't wanna do this step.

[00:02:44]
And we're gonna skip it. But I find it really helpful. If you check this, git will just tell you okay now git clone and give you the address, of your new project. But we're gonna leave this unchecked. And we're right create repository, GitHub will tell you this is how you either create a new repository on the command line that will be linked to with this GitHub repository.

[00:03:15]
Or if you already have one which you probably don't. Here's how to sync it up with your GitHub. So we're just going to go ahead and follow these steps. So we're gonna do this touch README.md. And if you Windows people are using. Git pass this should work.
>> Nina Zakharenko: So, I'm going to make a new directory.

[00:03:47]
I'm just gonna do that in the finder, so I'm gong to the desktop. Calling it awesome cuz it's awesome. So now I can change to my directory awesome. We'll see it's totally empty. And I'm just going to copy these commands from GitHub. So. I'm creating a new file now if I do an ls.

[00:04:18]
It's in that directory. I'm running git init, which will create a hidden .git directory. And tell you that all right, here you go, you have an empty git repository. We do ls we won't see it. We won't see this .git folder because it's hidden. Okay we're gonna add the README.md, and then we're gonna do my first commit.

[00:04:53]

>> Nina Zakharenko: Here we see the changes to be committed are this read me file. We're gonna copy that in. Git is gonna tell us that our commit has been done. And this step is the important one. It's kind of confusing. But this step, is telling your local repository here's where the server lives, where you're gonna push all your stuff back up.

[00:05:19]
And the sever is hosted by GitHub. So, unless there's an error you won't get any output from that command. And then the last step is git push origin master. And the -u is because we have not pushed from this repository before. So now if we go back to our GitHub.

[00:05:54]

>> Nina Zakharenko: We'll see that file that we pushed, from just a few minutes ago.
>> Nina Zakharenko: So all this stuff is definitely a lot to chew on. There's a really great free git book out there. And it's at git-scm.com. Lots of really good documentation here.
>> Speaker 2: Let's try git.
>> Nina Zakharenko: Yep.

[00:06:30]
Let's try git.
>> Nina Zakharenko: This is really good, it's interactive. Won't go quite as in-depth as we just went but definitely a good resource.
>> Nina Zakharenko: So we're just quickly going to brush over branches. So like I mentioned before, feature branches are, when you want to work on something and not disturb this pristine working copy that you have.

[00:07:24]
They're really not that interesting when it's just you working on a project. But they become really important when multiple people are working on a project and committing to the same repository of the same project. So at work I have my branch and Brian has his branch, and we'll go through the pull-request process.

[00:07:45]
So that we're not interfering with each other. I don't know what his files are and he doesn't know what my files are and it really doesn't matter. So if we go and make a new branch, and the terminology here is a little bit un-intuitive. The command is git checkout, and then -b.

[00:08:07]
-b is saying git make a new branch and the name is my branch. Git will just create a new one switch you right to it. And then if you type git branch you'll see a listing of all your local branches and git will show a star next to the one you're currently on.

