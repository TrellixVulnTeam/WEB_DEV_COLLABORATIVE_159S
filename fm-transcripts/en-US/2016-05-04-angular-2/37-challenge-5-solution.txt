[00:00:00]
>> [MUSIC]

[00:00:04]
>> Lukas: So we are going to create a widgets feature, so first thing's first. We'll create a directory, we'll call this widgets, from here I'm going to create a new TypeScript file, and I'll just call this widgets dot ts. No, and then, we'll go export class widgets
>> Lukas: I will decorate this.

[00:01:19]

>> Lukas: All right, there we go. I'm going to just preemptively create a couple things, because I know I'm going to need them. We'll go widgets service dot CSI, see your hand come up? Yes?
>> Speaker 2: There's a question on the servers running Import 3000 and the app is running on 2001.

[00:01:47]
They're just wondering, if there is some kind of configuration allowing the cross origin to avoid all those cores errors?
>> Lukas: cores errors [CROSSTALK]
>> Speaker 2: cores error
>> Speaker 3: I should be getting a cores errors.
>> Speaker 2: No, they're asking, is there something that's being done that's preventing that from happening?

[00:02:02]

>> Speaker 3: The JSON server command line tool, it's core's enabled.
>> Speaker 2: Okay. So it's all handled already.
>> Speaker 3: Yeah.
>> Speaker 2: I think they're just asking you how it was working.
>> Lukas: In this case, it's magic. It's like the awesome JSON server, the best JSON server in the world, and they get up and say, well this one I gotta use and it actually just works.

[00:02:22]
So, that's actually, I got that tip from a John Lundquist from egghead. I know so, it's basically in their workshops they use. Json server will actually, once we get into server communication, will mock out json or add it to the db dot json folder that's actually serving that up.

[00:02:41]
So you're just going to quickly create a widgets service cause we're going to need this as well. I know I didn't mention this in the challenge but since we are here. Actually, let's do, yesterday, it was picking that up, what happened?
>> Lukas: So, we're going to import.
>> Lukas: There we go.

[00:03:37]

>> Lukas: And I'll just go
>> Lukas: I'm really getting ahead of myself here, but whatever.
>> Lukas: Okay? Then in our widgets component, we are going to just import this in.
>> Lukas: Because we just want it to be available for this particular component.
>> Lukas: And we go with that fuzzy inject this constructor

[00:05:22]

>> Lukas: Okay, now let's for the sake of just making sure that this works. Let's go here to the items component.
>> Lukas: And.
>> Speaker 3: So you're importing it into the items component and not the app?
>> Lukas: For now.
>> Speaker 3: Okay.
>> Lukas: So if I was doing a route, then I would just probably import it wherever I'm doing the route definition.

[00:06:15]

>> Speaker 3: Yeah, I thought that was the instructions.
>> Lukas: Well so if that's as far as you got then your ahead of me, actually. So, I am doing the the path of mostly least resistance, we'll just go here, so we're going to add this. What I'm also going to do because I do not, and this is not going to work because I did.

[00:06:55]
Real quick notice, that I'm using single quotes. I've actually done this more than once. And that's how that works. As I think it would work here but, because I want to break this into a multi line template using ES 6 string templates, make sure that you use back ticks.

[00:07:13]

>> Speaker 4: Would you use color coordinate?
>> Lukas: What's that?
>> Speaker 3: Yeah.
>> Speaker 4: color coding
>> Lukas: Yeah That was worth a 100 bucks right there.
>> Lukas: We're just going to
>> Lukas: find this, and dump it into the screen. Let's see if this works. I'm basically making a deal with God right now, like if it does, like I'll never tell another lie again.

[00:07:44]
And there we have it.
>> Speaker 2: You can never lie.
>> Lukas: I can never lie again. I'll still get I still get Paradox, almost. Now, does anybody have any questions about what I've done thus far?
>> Lukas: To my friend in the back, were you able to get JSON server working?

[00:08:14]
Good, so everybody's working 100%, no student left behind?
>> Speaker 3: There's a question in chat, are all of our providers for all the components, not just services?
>> Speaker 3: Providers for.
>> Lukas: Yes, so when a provider services I think there maybe some nuances in there. But that is but that's mentally the condition I make like, when I say providers.

[00:08:43]
It's a service, directives are other components. Although that is interesting, now that I think about it, that they would make the distinction between components and directives, in terms of their semantics that the component is a directive with a template. A directive is, essentially a component without a template.

[00:09:09]
Then, if you wanted to inject another component into your component, you do it via the directives. I guess that makes sense because the component is a directive. I stand corrected. Man, figuring things out on the fly.
>> Speaker 5: And so, that thing I said yesterday about needing an indictable if your component or directive is true because directives inherit from the injectible.

[00:09:33]

>> Lukas: Inherit the what?
>> Speaker 5: Injectible.
>> Speaker 5: injectible is the base.
>> Lukas: Interesting. So, if someone or my friends out in the universe online, if they didn't hear that directives, the directive meta data inherits from injectable. Which is interesting. You are one step closer to knowing everything.

