[00:00:00]
>> [MUSIC]

[00:00:04]
>> Scott Moss: All right, so let's get back to the NGF1. So now, on NGF1, you click on one of these. We want it to be.
>> Scott Moss: We wanna show something different. How about what we do is, actually, let's come back to that one again. Let's do the last one.

[00:00:22]
That one's still so trivial. So the last one is add inputs to the directive to allow it to receive ID. Let's do that. So we'll come back in here. Inputs. Actually let's do it the other way this time so you can see how it works. Input and then we'll just call it, we can't call it ID because that's already taken.

[00:00:46]
So we'll call it. Widget, or position, whatever. So that'll take the position in here as this, some string. So we still have it, but what if. This input was changed from the outside. How did this directive react to it? Like in angular 1 you would use scope.watch. So what's the equivalent here?

[00:01:18]
Anybody know? No? Anybody want to guess? We didn't really talk about it. Setters and getters. So we can override the setters and getters of this property. So we can say when position is set we want this thing to happen. So when this thing is set. Our, what's the syntax for it.

[00:01:50]
Set position.
>> Scott Moss: Thought it was brackets.
>> Speaker 2: And is it set property something?
>> Scott Moss: No, let's look.
>> Speaker 2: Get column.
>> Scott Moss: Hm, yup. So it's set and then yeah, it is, that was right. I don't know the error, this thing's just messing up. So it is like this.

[00:02:41]

>> Scott Moss: Why is it error now, must have exactly one parameter. It's saying I need a parameter here, that's all. I'm like, why is it freaking out? All right, so yeah, so when we set this, now every time the input is changed from outside this directive this function here will be ran.

[00:02:55]
So we can do things like, for instance, based on the position of these components we could have like these components go through like a color scale or something like that based on the position. Something like that. So just different type of things we can do. But that's how you would respond to this thing being updated this is overwriting the setters and getters of the property that's being input.

[00:03:20]
In this case the input is position. If you wanted to do this inline with a directive then you would just do it this way, it's still the same way. I mean with the decorator you would still do it like this or like.
>> Speaker 3: Do you need to import?

[00:03:37]

>> Scott Moss: All right, that's why it's freaking out, thank you.
>> Scott Moss: Stop. There we go. So you will still do it the same way and this will just override it.
>> Scott Moss: So we'll just do that, and we'll go back to that position and we'll just keep it static.
>> Scott Moss: And then now here.

[00:04:17]

>> Scott Moss: We're able to pass in a position but we can also just like we did in our last example is just take advantage of this highlight property. That's really not doing anything. Maybe we pass in a color here and actually that will do the color that's on every wire but for the example we have position.

[00:04:33]
And it was like this, and then we passed in the widget.id.
>> Speaker 4: So if you hit two directives as the both token and put a POS, would they both pick it up?
>> Scott Moss: Say it again.
>> Speaker 4: [COUGH] If you hid multiple directives on the same element that took in similarly named parameters.

[00:04:59]
So if you hid to the parameter, they would both pick that up [INAUDIBLE]
>> Scott Moss: There would be a name collision in there. Yeah, I'm guessing they would both pick them up. They would both pick up the same thing, yeah. I think they would just handle it that way.

[00:05:09]
I don't think it would error out. Good question though. Any other questions on this?
>> Scott Moss: Okay. Still trying to think of a good use case for NGF here because this thing is like already showing. If you did something Eric, good job but I can't really think of a good use case to put an NGIF here, I mean I could I see an NGClass or something like that but not an NGF Like I don't know what if I would do.

[00:05:40]
It's already ifing here on the right so. So yeah. Those are directives. Pretty simple to get started with but I would say the structural directives and some of the internal observable stuff are probably some of the toughest stuff in Angular 2 I would say, they can get really, really crazy.

[00:06:01]
If you wanna see for example just go look at the docs and go look at some of the structure directives they built and kinda see what's going on in there, you'll see what I'm talking about. It's just like hm, a scientist built this for sure, so I highly recommend check it out though, learn a lot by looking at that stuff.

