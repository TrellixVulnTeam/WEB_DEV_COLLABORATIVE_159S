[00:00:00]
>> [MUSIC]

[00:00:03]
>> Lukas Ruebbelke: We need to create a form for widgets-detail. And then bind the form to the widget object that's selected, sent in via @input. And then be able to modify it and then send it back out to the parent component. So let's hop into the code and I have preemptively filled some of this out for the sake of styling.

[00:00:31]
So we just go here. You can see that now our widgets list is purty, as well as our widget details is semi-styled. What is it missing? Well, it is missing form fields. Let's go ahead and put those in. So we'll go to, I'm just going to copy at least one to get us started.

[00:01:00]

>> Lukas Ruebbelke: We'll go here.
>> Lukas Ruebbelke: Paste this in, and we're going to bind this to selectedWidget name. Enter a name, placeholder, class type, that's pretty straightforward.
>> Lukas Ruebbelke: Then what we wanna do, we'll place this in as well. And we're going to do selected widget price. And we're going to say enter a price.

[00:01:35]
Now, I'll talk about this more tomorrow, about what's happening here. But, when you start to focus on the mutable data in Angular 2, ultimately, the question comes. It's like, well If everything's immutable, how do you actually do any work? And the most obvious place where someone could look at that is, well what about forms, right?

[00:02:02]
How do you have an immutable data structure and do anything with it, much less a form? And so the approach that I use for this, after talking to Rob about it, is that you are going to have to have some mutable state in your application in order to do work.

[00:02:23]
Mutable state in itself is not bad. You have to be able to control it. And so, the way to do this with a form is to when you get an object, using an input you can actually overwrite that. So in this case when somebody sets a widget via input, I'm taking this value and I'm saying take this widget and just copy it.

[00:02:52]
Make a copy of it using object at a sign so that internally to my form I can work on this object. So now I'm not actually mutating state up the stream, and I think that's actually why my form builder's not working, cuz I think this. But if timing issue is messing up but the main thing is when you are dealing with forms you want to minimize mutable state or encapsulate so that you're only mutating state within this component.

[00:03:22]
You can overwrite the input and then make a copy of it. One of the thing that I am doing is I'm creating a reference to the original name of the widget. The reason why I'm doing that is, if I select this and if these are bound to the same properties, via reference, and I start typing here.

[00:03:49]
Had I not stored that reference into something else, it would say editing ASDF ASDF, and so I simply just create a reference so that when I actually start editing the object you're not losing that connection. So this is purely a UX optimization of LeKay I'm editing widget one but now this new name of the form is whatever I just typed in here.

[00:04:18]
So, selected widget and then up in the form this is what I'm binding to. It comes in over at the setter object assigned, which is our friend. We are creating a copy and then we're working locally. And then when we are ready to save this, we can go,

[00:04:42]

>> Lukas Ruebbelke: Click,
>> Lukas Ruebbelke: Let's go saved, emit, selected widget.
>> Lukas Ruebbelke: So now we are mutating it or passing it back up to do something, then in widgets, then we will go here,
>> Lukas Ruebbelke: weÂ´ll go Saved. Save widget event, we'll pass it in. Save widget widget. Actually, let's just do a console log here, save.

[00:05:51]
If everything went well, It is here, actually, let's, yes sir?
>> Speaker 2: Wouldn't you want, instead of having the click event on the submit button, wouldn't you want to do the submit on the form?
>> Lukas Ruebbelke: You could. Why, you preemptively have met me at the pass. That's where I was going.

