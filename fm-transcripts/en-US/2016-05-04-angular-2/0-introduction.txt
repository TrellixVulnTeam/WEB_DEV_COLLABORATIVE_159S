[00:00:00]
>> [MUSIC]

[00:00:38]
>> Lukas Ruebbelke: Welcome to Build Better Apps with Angular 2. This is, as Mark said, my third Frontend Masters Workshop, so I was here kind of towards the beginning of when Frontend Masters was still kind of growing up and it's since turned into a quite a veritable platform. I owe Mark actually, I was telling him last night that I really think kind of the genesis of my career in Angular started with Frontend Masters.

[00:01:11]
I'd been blogging for a bit, but then once I had hooked up with Mark and we did Frontend Masters, it seems like everything just went kind of to the next level, so huge thanks to him for that. I really just appreciate his commitment and his passion to building something that helps people learn, and he's really just passionate about changing just how people learn, and providing the best possible resources.

[00:01:35]
So just being conversational here as we kinda get started. It's amazing to me how when I go places, even in Europe and different places where people will come up to me and say, I got into Angular because of your Frontend Masters course that I saw. And so that is really, truly why I do what I do, is because Angular has been very good to me, it's provided a really good livelihood.

[00:02:00]
But being able to take the things that I'm excited about and convey it to other people, cuz I believe true mastery is when you can convey mastery. And so for me is that, my goal is by the end of these workshops, so we have today Angular 2 getting to know it, and then we have a reactive Angular on the third day.

[00:02:22]
Is that everybody walks out with a strong foundation for Angular 2, that they can go and build real things, but more importantly that it impacts you and in your life in your quality of life. Cuz I believe that when you have skill sets that you can translate, that you write better applications that makes people's lives better, so kind of a big grand vision here.

[00:02:45]
So for day one, my goal is that we have a strong grasp on how to build a single, basic feature in Angular 2. And so what I mean by that is, I tend to think of applications as a composition of features. And so we're going to learn how to build a single feature that's going to include a template, a component, a service and then eventually we will route to it.

[00:03:10]
But, a single feature. Then day two, is we're going to learn how to put together multiple, non-trivial features. So we're gonna learn how to basically work with a single building block, and then in day two we'll learn how to put these building blocks together and start to build more interesting things.

[00:03:26]
And then on day three we're going to learn how to make them reactive.
>> Lukas Ruebbelke: So here is the agenda.
>> Lukas Ruebbelke: We're gonna just talk about the Angular 2 big picture, we're just gonna lay it all out, high level, what is Angular 2, what's new in Angular 2, what are the big pieces?

[00:03:48]
Then Scott's gonna do a Prerequisite Primer in Tooling. So one of the things with Angular 2 is, Not only do you have to learn Angular 2, but there's some additional skills and tools that you kinda need to wrap your mind around. Then I'm going to talk about component fundamentals and what goes into building a component.

[00:04:09]
Scott gets the best module of the day, which is templates, which is one of my favorite things. I'll be back to talk about services. And then Scot gets the worst module of the day as a result, that's karma, and he gets to talk about routing. So, Angular 2 Big Picture.

[00:04:28]
And you'll notice these icons in the bottom of the slide, so this is a satellite, this is kind of me kind of broadcasting information. And so the modules are gonna kinda go in this format. So Scott or I will talk a little bit about some theory, then we're going to kind of show some examples so we'll talk about it.

[00:04:48]
We'll show it in code either in plunks or in the sample project, so you can kind of see what it looks like in the code so it'll anchor it, and then we'll give you an opportunity to do challenges. So probably 15, 20 minutes of talking, 10 to 15 minutes of walking through some code, offering commentary.

[00:05:07]
And then we'll turn you loose for 20, 25 minutes to actually kind of apply what we have talked about and then we can answer questions, and kind of go from there.

