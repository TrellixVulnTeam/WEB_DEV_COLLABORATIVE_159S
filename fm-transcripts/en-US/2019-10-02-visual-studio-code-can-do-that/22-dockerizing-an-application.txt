[00:00:00]
>> Burke Holland: The first time I heard about docker, I saw, the presentation from, I think it was one of the founders of docker. I think it's the most famous presentation where he talks about the problem of shipping apps and containers. And I watched 30 minutes of it and thought none of that made any sense to me.

[00:00:16]
It wasn't until I actually use the docker, that I understood what it was. So I wanna give you what's going to be a rough and possibly bad analogy, but hopefully will help you understand what docker does. When you build an application for Windows. Most people are probably familiar with Windows applications.

[00:00:35]
They have a file extension. What is it?
>> Class: Exe.
>> Burke Holland: Exe. When you build an exe, you take your application and all the dependencies that your application needs to run, and you put them inside of that container, and that container is called an exe. And then I can take that container, and I can give it to you, and you can double click on it, and it will run on your machine.

[00:01:00]
Or you can double click on and it will run on your machine. But that's not always worked. Because sometimes, you need the dot net framework or you need some runtime that's not there. So what docker is essentially, is it's an exe, where you can put runtime in it as well.

[00:01:19]
So imagine if I could take any framework that you needed java.net or whatever, I just put it in the exe. And then when you double clicked on it, whether you had it installed or not, it would just run. You don't have to worry about your environment. Everything is contained in the exe.

[00:01:33]
You also get access to a file system, so that if you're in the container, it looks like you're the you're on a server all by yourself. You're not. But you're in a container which thinks that it is. So if you're gonna imagine that, you're writing applications, putting them in a container.

[00:01:48]
And it's almost like you're on a preconfigured server. And then you're shipping that whole thing up to wherever it's going to run, okay? Everybody still with me? All right, so we wanna take a look at how that works today. You're gonna need the docker extension installed in order to do this, if I haven't mentioned that yet, when you install it, you're going to get this little, panel explorer view over here to the right.

[00:02:14]
And let me go ahead and remove some of these containers. Actually, I'll leave these running. We're gonna need these later and I wanna remove them. It'll just take us longer to build. So we have an application here. I'm gonna open this up in our start folder. And the application runs.

[00:02:32]
It's the one we've been running. It's a Express application here. It's the one we've been running all along. And what we wanna do is we wanna dockerize this application, to ship it somewhere so that it would run somewhere else. Now in order for this application to run, we have a couple of dependencies.

[00:02:50]
One of them is, node, wherever we ship this, node has to be installed. Okay, it's not gonna run very well without node. And so to dockerize this application, we need to add configuration files into it first. We don't know what those configuration files are, fortunately for you, visual studio code does.

[00:03:12]
So what I'm gonna do is open the command palette. I'm gonna say docker. Add Files, add docker files to workspace, okay? When I do that it's gonna ask me which workspace, and then it wants to know. What's your application platform? In other words, what dependencies do you need?

[00:03:30]
We're using node. If we're using Go or Java, it would pull in a base image for those, but since we're using node, it's gonna pull in a base image for node. I'm gonna select enter, what port does your app placed on? 3000 it's taken a good educated guess, and now, it's created a couple of files for us.

[00:03:48]
Specifically we have a Dockerfile,a docker compose,a docker compose debug and a docker ignore. Let's just walk through and start with the files that we have and look at the way they are built. If we look at the dockerfile here, here's what's happening. It's pulling in a base image.

[00:04:08]
In other words, what it's gonna do is, it's gonna go up to docker hub and it's gonna say give me an image that contains node, and it's gonna download that and pull that down. Then it's setting some environment variables here. Then it's gonna set a work directory. This is just the directory in the container where our apps is gonna be located.

[00:04:29]
Then it copies in our package.Jason. Runs npm install. Copies in the rest of the whole project. Exposes port 3000, so we can actually access the application, and then it runs in PM start and it actually starts the app. So, this docker file contains everything we need to containerize this app.

[00:04:49]
So let's containerized it. I'm gonna go ahead and command shift, control shift, pete of command palette, docker. And we're gonna do docker build. Okay, I'm gonna hit enter. It's gonna ask us which project we wanna build, begin working on a workspace with multiple projects. And then it wants to know what do you wanna call it?

[00:05:13]
Well let's give it a name. Let's call it, let's give it a specific name, frontendmasters-lamp. And see this latest out here on the end? This is the tag. So you can add a version to your image. And then when you use it or pull it from somewhere else, you can say, give me that version of the image.

[00:05:31]
A lot of times you'll see a latest tag, and what that means is this is, this is the latest version of the image. And so if you're deploying it somewhere, and you had automatic or continuous integration set up, and you deployed a new latest image, that's the one that would always be running.

[00:05:48]
So I'm gonna hit Enter, and now it's gonna go ahead and it's going to build this container which you just did. Now, mine went faster than yours is gonna go, because I've all ready pulled down the base note image and it's cached on my machine. But you can see it walking through the steps here.

[00:06:05]
It's pulling from code, setting the environment variables and we're good to go. And actually, I think in this one, no, we don't have any more environment variables that we need. So now, where is our container? Where we have an image rather, we built an image. We have an image at the moment.

[00:06:21]
Where is it? We come over to our docker extension here. We have it here, right there, you see it? And I can expand it and it's right inside. Now if I was to create a different one, so let's do this sorry, let's build. And let's do this. And let's say instead of latest, let's say it's 1.1.1.

[00:06:46]
Go ahead and do that, it's gonna build it again. And now look, both versions are there, right? So you see how tags work, okay? Now we wanna run this image as a container. To do that, I'm just gonna right click it and say Run. And it's gonna run the container, and you can see, port 3000 is already, so I need to, okay, let's try.

[00:07:09]
Where are we now? Okay, good. Do anything die, nothing died. All right, good. So run.
>> Burke Holland: There we go. So now it's running. So the containers running, where is it? It's up here, right there. So now it's actually running. So we can access this thing just like it was running our own machine.

[00:07:31]
So I'm gonna come over to Chrome. Let's go to local host 3000. And, and [LAUGH] we have a problem. So now we have a running container. But there's something wrong with it and we don't know what, so what we're gonna do is we're going to look at the logs for this container or we're gonna run it interactively.

[00:07:51]
So what I'm gonna do is, just, I'm gonna stop it. I'm gonna stop the container. And I'm gonna come back to my images. I'm gonna right click. I'm gonna say run interactive. What this is gonna do is, it's gonna open up an interactive prompt with the container, so we can see the things that are going on inside.

[00:08:05]
So let's do that.
>> Burke Holland: There we go. So the application is running here.
>> Burke Holland: And let me just make sure we've exposed, look at that.
>> Burke Holland: I exposed the wrong port. So let's change this. And let's do a rebuild, let's build our image again. And let's just do latest.

[00:08:36]

>> Burke Holland: There we go, and then you always need to run the image. Even if it looks like it's already running up there, you wanna make sure that you're running the right one. And the port's already allocated, [LAUGH] so let's get rid of that. All right, and that's in the docker went down, so it's coming back out.

[00:08:55]
Let's give it a second here. The port stuff is a little tricky on this exercise, but just bear with me. One of the things about docker that is a little tricky is that, you have to map ports from docker back to your machine, so that you can actually access the container.

[00:09:09]
Otherwise, port 3000 is on your machine. It's not in the container and they're not mapped to each other, and you won't be able to access it. Alright, we're back [LAUGH] up and running, let's do this again front end masters, make sure I don't have anything running on this port, it look good.

[00:09:27]
We run latest.
>> Burke Holland: All right, and come back over and hopefully. All right, so now we're running inside of our container, okay? But we can't really see what's going on inside of the container. It's a bit of a black box. So what we can do here is we can view logs.

[00:09:49]
And we can see all the logs that are coming out of our container. This is our little server that's running. And if I do a refresh, you can see all the logs. Now remember, I told you that containers think that they're the only thing on the operating, they think that they are an operating system essentially.

[00:10:04]
So if we wanted to look inside of this container, we can do that. We can right click and say, attach a shell. And now, we have a command prompt inside of the container. See that says user/src/app? Do you remember in our docker file, that right there? Okay, so that's the directory that we created where our app is running.

[00:10:27]
If I do ls I can see all of the files that are inside of this docker container. It's my project files. They were copied over, there they are. Now check this out, watch this. If I change directories and I go to the root, look, what does that look like?

[00:10:45]
The root of a Linux file system, it thinks that it's on a server all by itself and it has the whole server. How does this work? I have no idea.
>> Class: [LAUGH]
>> Burke Holland: This should not work. This should not be possible but it is and it changes everything.

[00:11:01]
And this is why I'm so excited about docker and why it's so important for us to go over it today

