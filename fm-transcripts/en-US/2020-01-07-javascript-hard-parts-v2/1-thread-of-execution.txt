[00:00:00]
>> Will Sentance: So here we start with principles of JavaScript. All of this fancy stuff to come, all of this profundity to come, but we start with principles of JavaScript. And I'll say this of all this. You're gonna look at the code, and you're gonna go yeah, yeah, yeah, I get what this is doing.

[00:00:16]
All right, people, here we go. JavaScript is not that fancy. It does two things. One, it goes through our code line by line. There's a block of code we're gonna work through right now. It go through it line by line and does each of the lines of code.

[00:00:32]
They call this the thread of execution. It threads its way down and executes, that's a fancy word for doing the code as it goes. That's feature one of JavaScript. Feature two of JavaScript is the stuff that it encounters if it's saying save something, like a variable or a constant, or even some code itself, known as a function.

[00:00:52]
Well, it saves that stuff in the computer's memory, to come back to later on, and use. All right, and this area, here, people, I'm gonna capture, just as JavaScript does under the hood, all of the stuff that's being stored as we go through the code line by line.

[00:01:07]
This isn't like magic, this isn't me creating an abstraction of what's happening. This is literally what's happening. I mean, not obviously, visually, but this is every line we store as we go. And that's all that stuff we encounter is stored into the memory. This is the fancy word in JavaScript in partnering for the place in which we store data.

[00:01:27]
And so here we go, who is gonna have the honor of doing line one, was it Kayla? Kayla, line one, what are we doing with that code here, verbalize it for me, Kayla.
>> Speaker 2: You're defining a constant called num.
>> Will Sentance: Beautiful, and?
>> Speaker 2: Alter three.
>> Will Sentance: And assigning it the value 3, there it is people.

[00:01:45]
That means from now on if you see num in our code, we know that it's gonna go look, and find the value, what, Kayla?
>> Speaker 2: 3.
>> Will Sentance: 3, she's spot-on. Excellent to Kayla, for being the first person to be called upon. Next line, now I turn to Matt.

[00:02:03]

>> Speaker 3: We're defining the function, multiplyBy2.
>> Will Sentance: Thank you, Matt, exactly. And this is to say, people, when we define a function, there's two parts. There's our identifier, that is the fancy word for the label for anything you're storing in computer's memory. The identifier here is multiplyBy2. The identifier before was num.

[00:02:23]
I recently learned this word, the identifier. And we then take all the code to the function, we're not gonna run any of it right now. We're gonna take it, bundle it up and store it in the computer's memory like a string of characters, all the code of that function.

[00:02:37]
I'm not gonna write all that code up, but literally imagine it all saved here. Instead, I'm gonna represent it with this little box with an effin that represents the function. There you go. All right, and therefore our thread of execution, the fancy feature of JavaScript, that can take the code do it, take the code, do it, take the code, do it.

[00:02:57]
Now we've down to where Braden, what does it hit next?
>> Speaker 3: It defines the variable output.
>> Will Sentance: Yeah, I'm gonna create constant, people tend to seem to be using variable as a generic term for, Label + data, identifier + data, but think about it, it literally means I can vary the data that I store in that label.

[00:03:21]
And with a constant, I can't vary, I can't take away what I had stored there before and store something else, and we'll see more about that later on. So let's say we declare a constant output, excellent. Now Braden, what am I gonna store in output? Do I know yet?

[00:03:36]

>> Speaker 3: No.
>> Will Sentance: I don't, exactly, because this right hand side is what Braden?
>> Speaker 3: A serial function.
>> Will Sentance: It's?
>> Speaker 3: Function call.
>> Will Sentance: Function call. Excellent from Dan, excellent from Dan. A call to a function is a command. I can only store values that's fixed final things. I can't store a instruction, a go do some work.

[00:03:59]
Dan, what tells me that this right hand side is a command?
>> Speaker 3: Parentheses.
>> Will Sentance: Parentheses, exactly. Exactly right. So then now it's gonna remain uninitialized. This is in contrast to the old days where it's undefined because again, if we had to carry our constant output, if we saved the little data undefined here, well, then we wouldn't get to change it out for the value that calls back from the function.

[00:04:21]
So now we just say it's not really even fully stored here. I'm gonna show it here, but it's not got any value in it yet. Okay, so we wouldn't even, if we were to inside the running and multiplyBy2 try and log output, we wouldn't see undefined, we just see it's not there.

[00:04:35]
Okay, while we head off and run, multiplyBy2, everybody, be ready, because this is the cool feature of JavaScript. This is the moment that you've all been waiting for. We're gonna call it with num. Kayla, what does num evaluate to, what value does it turn into?
>> Speaker 2: 3.
>> Will Sentance: 3, hold on.

