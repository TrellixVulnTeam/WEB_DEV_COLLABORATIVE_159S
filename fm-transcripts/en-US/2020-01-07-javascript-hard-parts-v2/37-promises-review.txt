[00:00:00]
>> Will Sentance: Then should be renamed what? It should be renamed this, store function to run later. Yeah, exactly. Future data.store me to run me later automatically when the background task that came out of the fetch call previously completes and the value probably gets updated. Not catchy but it is accurate.

[00:00:21]
So, I will add one more benefit though. So, people think kind of cleaner, readable style, I'll say, like pseudo synchronous, it sort of looks like you're running it right then but you really are not. You're passing in a function that's gonna be auto run as before, not by you, but by JavaScript.

[00:00:37]
And it's taking an input that you didn't put in there, java who put in there. From the background work, that high string that's gonna be auto inserted into display function when it's auto run. I love it. By the way, once you see that JavaScript or once one sees that JavaScript is taking that function code of display, and it's running it for you by putting print on it for you automatically.

[00:00:57]
And it's inserting the input for you automatically, it's very generous language in that sense. There is one big benefit to this design, and it's that error handling process. So this is really nice. It turns out people, there's actually another array on this promise object behind the scenes, another hidden property and it's called On Rejection.

[00:01:23]
And it's also an array into which we can put functions. When you interact with the outside world especially network stuff, you get errors all the time. You don't wanna run your display function so the user on Twitter gets a lovely broadcast of the full details of the error.

[00:01:40]
Ideally we would have a separate function is gonna run that handles that error. Maybe it logs it for you in some way, but probably just gives the user a better experience. It's doing something similar, maybe, whatever it might be. Now, how can we handle that? Well, you know what, the promise I'll just give us this amazing feature.

[00:01:59]
That means if we get an error back not the actual response object that we want, any error, it's not gonna run that display function. It's not even gonna auto trigger any of the functions and unfulfilled. It's going to trigger any functions that you stored in on rejection. How do we get functions in there?

[00:02:15]
Well, there's two ways, one would be to write futureData.anyone know?
>> Speaker 2: .catch.
>> Will Sentance: .catch, spot on, exactly, Kayla's right, .catch. And any function we pass in there is going in your rejection array. The other way is to pass to then as the second argument, whatever function you want that's gonna go in here to auto run on error.

[00:02:41]
First argument, stick that function in unfulfilled. Then we'll take the second argument, the second input and stick that function in your rejected. That's really nice, that's a really really nice error handling approach without a doubt. All right folks, so there we have it, we now have rules for the execution of our asynchronously delay code hold promise deferred functions.

[00:03:05]
This is what Dan was saying promise deferred functions, ones that were attached to a promise to delay them running until something happened in the background. Store them in the micro task queue and callback functions ones that were passed in to one of these facade functions like timer, sorry, set timeout, have them go in the callback queue.

[00:03:25]
When the web browser feature, otherwise known as API finishes, add the function to the call stack, in other words, run it. When call stack is empty and all global code is finished running, have the event loop check this condition for us. Before we know it code is I would run next, prioritize functions in the micro task queue over the callback queue.

[00:03:53]
Promises web browser features, the callback and micro task queues and the event loop enable us to build non blocking applications. We don't have to wait in this single JavaScript thread. We'd have to wait here for our data to come back. No waiting on this line, fetch we're not sitting on this line waiting for the data to come back.

[00:04:12]
No, no, no, no. I mean, no in regular code we do, in function code, you're staying on that line til you finished it. But it's not a regular function call. It's a facade function for setting up background work. However long it takes, we can't predict when our Browser features work will finish in the background.

[00:04:28]
We can't know exactly when it's gonna finish. So we can't kinda have the line of code that's gonna use that background data run right now. Because we tell it when to run, we got to rely on JavaScript that knows when the background work is done, to automatically trigger the function to run on that moment.

[00:04:45]
This is what allows us people to build these non blocking dynamic, fast applications. We can handle setting up a ton of stuff in the background while we race on in the foreground, running our code, being responsive, responsive to users interactions, building these dynamic applications. This is what really makes JavaScript very very special and very usable.

