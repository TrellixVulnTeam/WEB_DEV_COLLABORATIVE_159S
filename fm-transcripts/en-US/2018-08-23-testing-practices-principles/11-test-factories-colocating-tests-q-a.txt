[00:00:00]
>> Speaker 1: Yeah.
>> Kent: We can't help but notice things, there's something we do, like say you have a tasks like these. And it might be that there's some dynamic aspect to this. And so would have a list of properties we are expecting and another list of properties we aren't.

[00:00:18]
And then have like a test factory, essentially, that sort of for reaches on those properties. And how I have my desk set up for some of our projects, like it's very clear if something breaks, and basically lifts out each of the generated assertions from a list, it gives me an x next to the one that failed.

[00:00:41]
And I did the same things for this and it's just presenting different- Is that kind of just configuration stuff or?
>> Speaker 1: I'll have to look at specifically what things look like, but I'm glad that you brought this up because that's what we're going to talk about next. This is great, so with pure functions, this works super super well.

[00:01:06]
So if you notice that all of this stuff right here that's identical stuff, but if there was like a slit difference and maybe that difference is important like it's password not allowed, then you might not actually notice like up to this point, there's still totally identical. And so it could be easy to miss this key differences between this different assertions here, and so one thing that I like to do is, exactly as David was talking about, create a test factory.

[00:01:39]
We'll talk about test object factories like this that pattern themselves. But when we're doing a pure function like this, creating a test factory is a really good approach. And so that's what we're gonna do here. I'm actually gonna put this in a describe block. This is one place where a jest, or MOCHA supports this jest supports this, Jasmine.

[00:02:04]
This is very common, but it's a way of grouping similar tests together. And so here we'll just test the, or describe is password allowed. And inside of here I'm gonna make my allowed passwords. And then I'll also make my disallowedPasswords. And then for each of the, actually, let's just stick those in here.

[00:02:32]
So we've got one allowedPassword. We could add more if we wanted to, but I think we're good with what we've got. Let's disallow password. Here's another one and here's another one, okay, cool. With this, I'll say my allowed passwords for each and this is going to be a password.

[00:02:57]

>> Speaker 1: And we could an it block here. I think in my solution, I do a test block, it and tester, aliases of one another, so however you like to read it. But I'll say, it should be allowed. And actually, even better, I can, because we're generating these tests on the fly I'll make this a template later on.

[00:03:19]
Say, password should be allowed. That will make my error message a lot more descriptive. If there's an error then I know this password should have been allowed but it's not for some reason. So then I'll just copy this assertion right here. And we'll pass in a password. Expect that to be true.

[00:03:38]
And we'll do something very similar for the disallow passwords, yes, question?
>> Speaker 3: I was going to say, because there's a possibility of an empty string. I would actually wrap the.
>> Kent: Good idea! Yeah, good suggestion. Put quotes around here.
>> Kent: Oops, I think, and then we'll have our disallowedPasswords, and we'll expect this to be false.

[00:04:06]

>> Speaker 1: And that's our free factor.
>> Kent: And then if one of these were to fail, we'd say maybe the length has to be we remove this entirely, there we go.
>> Speaker 1: Then that's, sorry. That's a, how do I make this thing fail?
>> Speaker 3: [INAUDIBLE] Requirement 20.
>> Kent: Yeah, there we go.

[00:04:32]
Thank you, awesome. So now we see is password allowed. This should be allowed, but apparently something's broken to make it not. We can look at the assertion or the this code block here. And actually in this case it's not all that useful. When you're doing generated tests, the error message will be pretty generic.

[00:04:57]
It's pointing at a part of code that doesn't give you any indication of which one of these is the one that's breaking. That's why it's important to have the title contain specific information about the data, so that when you see the error title, it will at least show that.

[00:05:20]
So you're trading off some convenience for it a little bit. You gotta do a little bit more work to do make sure the error message is useful. But at the end of the day, what's really nice about this is for a really big, like if this were a really complicated function, now you just put a bunch of these and you say, okay, these are all passwords that are allowed.

[00:05:43]
If we are going to now disallow some more, then we just add another entry to this. And it's a lot easier to add to this test, also coming into this test you just read that variable, and you're like, okay, I understand what What these things are all about.

[00:06:01]
So I'll show you a more extreme example, and then, yeah, sorry?
>> Speaker 4: Can you talk about why you chose to put it in a describe block, in this case, and when you might do that.
>> Kent: Yeah, there isn't a whole lot of reason, to be perfectly honest. I mean, I have this isPasswordAllowed block in, so it appears, kind of, in my error message.

[00:06:24]
Alternatively, I could say is PasswordAllowed. Like prefix these manually, and then pull this out iof the describe block, and that would be just as well. So, I'm fine either way. Like I said, normally I don't really like describe blocks, so maybe I prefer this. But there's actually yet something else that I might do if I'm gonna have Several tests like this in my code days, and that is use this jest in case.

[00:07:00]
If you are going to be using jest, sorry, taking a step back, this is specific stuff. I love this, it is awesome. You have this idea of cases, so we would have just an array of our password strings. And then, this is the title and then your assertion.

[00:07:21]
And then you can actually provide the name property, and that will be used as part of the title for your output. And so yeah, I love this. I should have gotten it ready cuz I just refactored some tests in PayPal that leverage this pretty heavily in a really nice way.

[00:07:41]
Pure functions, this works really, really well with. Another real world example of this is, I have a project called RTL-CSS-JS. Which takes some CSS and JS styles, it's just objects as CSS, and then converts that to the right to left conversion of that. Pretty common tool if you're doing internationalization.

[00:08:05]
But this is for CSS and JS specifically. So the test for this, because it's a pure function, and there's a ton of properties we have to manage, that's sort of how we're doing this in this file. So rather than having a test for each of all these different things, we just have here's our input, and here's our output.

[00:08:29]
And it makes it much, really straightforward, okay. Padding left's gonna be padding right. Padding right's gonna be padding left. And so on and so forth, gets kind of complicated, and by doing things this way, you know that all of these tests don't have anything special or different about them.

[00:08:46]
This test is operating in the same way. The assertions are happening in the same way. The setup, everything's happening exactly the same. So adding to, making changes to this test base is a lot easier, and people do it all the time. The ones here toward the bottom were added by a lot of different people who were like, I have this special case where I had a space and tings blew up, so they got a new test case for that and they fix it.

[00:09:18]
Okay, cool, let me fix my off thing here, it'd be six, because who wants a password of 20 characters? Okay, cool, so that is unit testing at its finest, well, at its basic, yeah.
>> Speaker 5: Were you gonna talk about where you located your tests at?
>> Kent: Yeah.
>> Speaker 5: Or do you wanna do that after?

[00:09:41]

>> Kent: I'll do that now, if that's cool. So actually David, do you wanna just ask that so everybody knows what we're talking about?
>> David: Yeah, so I was just looking at the project structure and I noticed that you had all your tests in folder is called underscore, underscore test located near the source.

[00:09:59]
And so I was just curious where that convention came from and if you could talk about it.
>> Kent: Yeah, totally, so this is a convention that just supports. It also supports if you want to you could add a file right here called auth.test or auth.spec. It doesn't actually doesn't have to have any particular name, it doesn't have to be the same name as the file it's testing or anything like that, but there is a pattern by default that just will match.

[00:10:25]
So there are a couple of things to just call out I actually don't care what you call it. You can do the dot test, or dot speck, or you could change the patterns entirely, but one thing that I would recommend, is co-locating your test. I've actually got a blog post about this.

[00:10:40]
What code comments can teach us about scaling a codebase. It's a terrible blog post name cuz it doesn't give you any idea of what this blog post is about but this is exactly what it's about. It's about co-locating your tests where in one scenario and I saw this in a lot of projects.

[00:10:57]
You would have your search directory and then your test directory, and they are mirrors of each other. And then you come in here and you delete this file, and you forget to delete the test. Or you add a file, and you forget to add a test. You move files, and you forget to move the test.

[00:11:10]
It just gets to be a total nightmare. I've entered too many projects that were like this, and it was really annoying. Because the tests and the source get out of sync. And so by co-locating these things it makes it a lot easier. Not only to make sure that you're moving the test and keeping things in the right place.

[00:11:32]
But also if I'm making a change to this image file. I see the test right there. I'm like, I should probably add a test for this change that I'm making. So it just makes tests have a much more relevant position in your project, so that you're constantly thinking about it.

[00:11:48]
So yeah, co-locating tests, really, really good idea. And the premise of the blog post is that we don't write code comments in a comments directory that's mapped to our source directory. That doesn't make any sense. You co-locate your comments. It makes a lot of sense in the same way to co-locate your tests, yeah?

[00:12:09]

>> David: Make a comment that might be public, or helpful, or both. When we moved to Jess, I loved the co-location, it's fantastic for ergonomics, when you're developing. Make sure you don't accidentally ship your tests.
>> Kent: [LAUGH]
>> David: I almost did that.
>> Kent: Yeah, yeah-
>> David: I didn't have them ignored in my one pectal.

[00:12:30]

>> Kent: That's a very wise.
>> David: [LAUGH] it's full of snapchats.
>> Kent: Yeah, well, that's a wise idea. So if you're doing some sort of, especially if you're doing code splitting, or dynamic imports, or something like that, that's probably what happened. Make sure that your web pack isn't going to bundle up your tests and snapshots and stuff, yeah?

[00:12:52]

>> Speaker 7: If that's a co-locating test when it comes to integration tests, cause, for example, we have tests that operate at the page level and our UI projects will often have are source code laid out by page. And so within there, it's like, all right, that makes sense. Have an index spec that's doing integration testing at that page level.

[00:13:15]
But then we have cases where we want to test stuff that actually moves across pages and so on. And it's always kind of a head-scratcher, like where do I [CROSSTALK].
>> Kent: Yeah, where do I put this? Yeah, that's a great question. I'm glad you brought it up. So the principle, I think, let me see if I can find the basic principle.

[00:13:33]
Here we go, so place files as close to where they're relevant as possible. That's the principle. And so if it's a unit test that's gonna be a single file. You put it right next to it. If it's an integration test that tests several units but they're part of a single feature then you can put it right there.

[00:13:48]
In the least common parent directory or something. But yeah, if it's an end to end or integration of several pages, then at some point I stop caring about least common parent. I'm just like, okay, this is just gonna go at the root, and that's what we do in this project as well.

[00:14:07]
If you check out that client site test. So those, we have some integrattion tests at the root of the source directory thats the whole app. And then the end to end tests are atually in an entirely different directory because we have the end to end tests are covering server and clients so its at the root.

[00:14:26]
That's a great question. Any other questions, yeah.
>> Speaker 8: So I guess it's pretty common for tests and scribe and expect all to just be available. You don't have to import them or anything.
>> Kent: Yeah.
>> Speaker 8: What's the deal with that and why haven't we moved on?
>> Kent: [LAUGH] From globals?

[00:14:47]

>> Speaker 8: Yeah.
>> Kent: Yeah, so that's a good question. Lots of people have raised that concern and prefer other frameworks that require an import of some kind.
>> Speaker 8: Do I have the option to import [INAUDIBLE] my IDE?
>> Kent: Yeah, yeah, so for the IDE help, you can configure [INAUDIBLE] slangs or whatever you're working with to treat those as globals.

[00:15:08]
That's what I do. From a philisophical standpoint of these globals from these testing stand points. After you've decided testing framework. All of our test are gonna need this. It doesn't make a whole lot like I use to use AVA. And I loved that I imported all the stuff.

[00:15:30]
And but I was like okay every single test looks exactly the same. Then why dont we just cut the craft and just. Assume that is loaded, or whatever. So I'm actually fine with the globals. But the problem with globals, philosophically, is it makes your application hard to maintain.

[00:15:46]
Gotta load this script, and then this one, otherwise it depends on a global, and it's a mess. But we don't have any of those problems with tests. We're not modifying these describe functions, we're not doing any of that stuff. So I'm less concerned about the globals. As far as whether specifically which S whether you can make it be importable I feel like there's a project that allows you to import these functions and yeah.

[00:16:12]
You could check that out. But for me I'm tired of importing stuff that I'm using in every test so I'm find with having those globals. So I wouldn't make them myself though. If the framework didn't already do the global thing, I probably would just import them cuz it feels weird to make them myself I guess.

[00:16:37]

>> Speaker 8: Good answer.
>> Kent: Yeah, sure.

