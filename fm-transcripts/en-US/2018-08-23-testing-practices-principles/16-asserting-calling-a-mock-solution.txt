[00:00:00]
>> Kent Dodds: Let's go ahead and keep track of when this is called, so we can make assertions on how it was called. So the first thing I'm gonna do is, I'll say, utils.getWinner.mock ={ calls: [] }, I'm sure we can do that all in one line. And then we'll turn this arrow function into an arrow function with a body.

[00:00:25]
And we'll just push onto that array every single time it's called. So we'll say utils.getwinner.mock.calls.push(). We wanna push all of the arguments. So what I'm gonna do is we'll make args and then push args, and then we'll return args at one. So various ways you could do that, all right, I kinda like the way that reads.

[00:00:53]
Great, so now if we console log, utils.getWinner.mock.calls after this thumb war was called. Then we'll get that printed out. Awesome, so we just need to assert. We could do this a couple different ways. Actually, I think of my solution I iterate over the calls and make an assertion for each one of those.

[00:01:17]
Just something occurred to me that I could actually do this, expect to equal.
>> Kent Dodds: And that indicates a so it's called twice. And it's called with exactly that. Alternatively, actually I'll just show you the solution for the alternative. I say that calls has a length too and every single time it's called, it's called with that.

[00:01:40]
So either one works just as well, it gives you just as much confidence. So, good with that.
>> Kent Dodds: Yes?
>> Speaker 2: So the JavaScript on this one really throws me, so I wonder if you can put some words behind it. So here's my question. Line 10 we're assigning the getWinner property of utils to be a function.

[00:02:03]
Line 4 Well, not sure where they'll.
>> Kent Dodds: Yeah, sorry they're relative, here let me, insert mode. [LAUGH]
>> Speaker 2: Line 14, we're assigning getWinner to have a property to be a JavaScript object that has a property of max. So help me understand how getWinner can be a function and also have a property.

[00:02:21]

>> Kent Dodds: Yeah so functions are first class objects in JavaScript. So they can have properties and that's, trying to think of a good example of that. For example, expect is a function but we also have those asymmetrical matchers. So it's expect any string like we had in the example of matching a schema.

[00:02:50]
So expect is a function, but it's a function that has properties, and you can put any number of properties on functions that you want. Pretty handy feature, I use it pretty often. Other questions?
>> Kent Dodds: Sweet. So let's,
>> Kent Dodds: Look at this next situation. Man, I accidentally lost our keeping track of the times it's called, sorry about that.

[00:03:27]
Right, let's just pretend that that's still part of our assertions. One thing that is kind of annoying about what we have right here is having to keep track of the original getWinner, and then restoring that ourselves. And also, all of this code, if we had to do this every single time we wanted to mock function, that would be kind of annoying.

[00:03:48]
And so instead we're going to use just spyOn to do this. So when you're implementing this one, go ahead and pull your original assertion over, your previous assertion over to this. Because what we implemented is actually the same kind of API that just spyOn supports. But other than that, yeah, try to swap this implementation for just spy on.

[00:04:17]
Yeah, and then mock restore.

