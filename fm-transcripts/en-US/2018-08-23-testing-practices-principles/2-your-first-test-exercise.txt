[00:00:00]
>> Kent C. Dodds: So what is a JavaScript Test? This is actually a link to a blog that I posted a couple weeks ago, back in January, where I basically have a blog post form of what we're about to do. But now we're gonna jump into the project, and you're gonna do this.

[00:00:18]
So if you can open up your project, open up your terminal and the project in your editor. We're gonna start in this other directory and whats-a-test.
>> Kent C. Dodds: And you'll start in 1.todo.js. And in here, there are some comments to explain what you're supposed to do. But the idea is, with all of these, is that you're going to write a framework, and then you'll write an assertion library.

[00:00:51]
But this first one, we're going to write the simplest form of a test that you could possibly imagine. And so to run this, you're gonna want to change your directory into this, where we are right now, so you'll cd into other/whats-a-test. And then for each one of these it'll say, then run this code with, and then a command.

[00:01:18]
So for us it's node 1.todo. And you'll know that you got it right when running that actually throws a bug, or throws an error, because there is a bug. Who found the bug? Yeah, Peter found it, what is it?
>> Peter: Sum is actually subtracting, it's not-
>> Kent C. Dodds: Yeah, yeah, so that's intentional, because a huge part of testing framework's job is to show you the errors, and you get error messages so you can both know what's wrong and also know how to fix it.

[00:01:54]
And so yeah, so sum is intentionally broken in this way. So what your job is is to write additional code, presumably after this code, to throw an error, a useful error, to validate whether sum is working or not. So you use sum, and then you validate that it is returning what it should be.

[00:02:17]
And if it's not, then you throw an error.

