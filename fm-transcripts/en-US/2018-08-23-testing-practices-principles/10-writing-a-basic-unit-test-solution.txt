[00:00:00]
>> Kent C Dodds: So let's go through the solution here, userToJSON. Please make sure to ask any questions if you have any. So I'm going to uncomment the user here. And then I'm going to, let's pull in that userToJSON function from the off. And we'll say userToJSON with that user. And we'll get the jsonUser back.

[00:00:23]
Actually, I'm gonna start with the console.log(jsonUser), just to make sure I'm getting what I think I am. I stop my tests, so I'll run npm test. And here's a fun little trick, you can actually add additional arguments and that will be the rejex for the test that you wanna run.

[00:00:40]
So I'll say, utils.*auth.todo, and that will get me running just the one that I want, great. So I have, exactly what I expected to be. So as several of you mentioned and noticed, there are actually several ways that I could make these assertions. So here's a pretty basic way that I could do this, I could expect the jsonUser to equal.

[00:01:09]
And actually here we'll just copy and paste this. It's my favorite way to write a test, is copy, paste the console log error. I'm just joking. [LAUGH] But now, so the real winner here to make sure things are working, is to break the source code and make sure that it can break.

[00:01:28]
And then to check on the error message to make sure it's clear. So userToJSON exclude secured properties. And we expected it to look like this but it looked like this. And here's the difference the received gave me back the exp value. So this is one way I could write this insertion.

[00:01:46]
And this actually as far as I'm concerned, if I saw that in ci, like the test were running in ci and something and I saw that, I think I'd know exactly what was going on. I'd be able to fix that bug pretty easily. But there's something that we could do to communicate.

[00:02:05]
Something a little bit more to the maintainers of this test. And that is, we have some duplication between these properties and these properties. And you could communicate in some way to say, it's not just happen stance that these two things are the same. They're actually the fact that they're the same is an important part we're testing.

[00:02:31]
And so one thing that we could do, we could make a safeUser. And move the safe properties up to that safeUser. And then make the user be composed of the safeUser and then these unsafe properties. And then we could say that the JSON is equal to the safeUser.

[00:02:52]

>> Kent C Dodds: And then let's go ahead and fix this back so our test get passing. So as somebody coming into this test, I see this explicit relationship, that there is this concept of a safeUser object. And a user is composed of safeUser properties, as well as these unsafe user properties.

[00:03:12]
And when I pass that, the for user object to this userToJSON, it gives me back just the properties that are in the safeUser. Did anybody fill out the feedback form, or the elaboration, and have something that you learned that you'd like to share with everybody? What was something that you learned?

[00:03:32]
Yeah.
>> Speaker 2: I'm used to Karma, and we were actually considering JEST. There's a lot of things here that were missing.
>> Kent C Dodds: Great.
>> Speaker 2: Which was kinda nice.
>> Kent C Dodds: Yeah, JEST is great. So I've given this workshop several times and often in the feedback on this first experience with JEST, people will say JEST is amazing.

[00:03:52]
Cuz yeah, JEST is, it is amazing so I'm glad you like it, that's good. Yeah.
>> Peter: It's good to note that you have so many different ways. JEST gives you so many different ways to test the shape of data. It's good to note that can write your test in a way that communicates with other developers.

[00:04:15]
And have an eye for that as opposed to just trying to make the assertion work the way you expect it to and move on.
>> Kent C Dodds: Yeah, exactly Peter, I think that's a really important takeaway, is your tests are doing more than just passing when things are good. They're also giving you good error messages when things are not good.

[00:04:39]
Cuz that's when it actually really matters, is when things are busted. You wanna fix it, and often you're like, this thing's busted. We've gotta fix it really fast. And then also in the source code like you said, Peter, trying to make it somehow communicate the relationships. Now, that said, this is logic in our test.

[00:04:59]
Sort of, there's a tiny bit of logic going on here. And I would shy away from basically rewriting your source code in your test code. That would not be a very great idea. Another thing that we could do is we just copy this same stuff. We'd say, safeUser is equal to that user minus those properties.

[00:05:26]
And now, we've just copied our source code in our test, that's not something that you want to do. But so long as the minimal amount of logic that you're doing is really straightforward, not much room for error here. And you can communicate the relationships and that's a good way to go.

