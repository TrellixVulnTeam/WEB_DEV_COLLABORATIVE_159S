[00:00:00]
>> Kent C. Dodds: Great. So that was a pretty quick little exercise but let's work through it here and please ask me any questions that you have. So we've got this bug in sum and we need to be able to run this script and have it fail because that bug exist.

[00:00:17]
So what we're gonna do is I'm gonna say Const the result equals sum of three and seven. And I want that to equal, like we'll say, our expected is ten, so that's what I expect it to equal. So here I can just say, if the result is not equal to the expected then I'll throw a new error that says something like, the result is not equal to the expected of expected.

[00:00:56]
Now, if I ran that, I'm going to get my error. Hooray! Then if I replace this to a plus then it should pass, right? So, this is a test. At a fundamental level, all that a test is is something that throws an error if there's a problem with your system, if there's a bug.

[00:01:17]
And the error message is really important. Right now, this error message is pretty good. We could maybe make it a little bit better. We're gonna see how frameworks can help us improve our error messages and in insertion libraries. But yeah at a fundamental level that's what a test is.

[00:01:34]
We can also add a test for subtract as well but I think you get the idea. Does anybody have any questions about this?
>> Kent C. Dodds: Nothing. Okay, great. So our next one, if you're like at 2.two do, you're going to write an assertion library. This imperative code right here, not my favorite.

[00:01:56]
It would be great to package that up so I can reuse this over and over again. If I wanted to do this, like for example, here's the end result if we test both of these. I'm doing the same kind of thing twice, so it would be really great if I could package that up into a single assertion.

[00:02:14]
And so what I want you to do is create a function that can be called with an actual value and it returns an object that has some properties on it. The one property we're using here is 2b. And that is a function that accepts the expected value. And if the actual is not equal to the expected value, then it should throw the error, okay?

[00:02:37]
And then refactor this code to use your fancy new assertion library. And then sorry, to run it, you'll just do node 2.two do. And you'll get an error. So there's no way to know but if you can make this error happen with this sort of API then you're good.

