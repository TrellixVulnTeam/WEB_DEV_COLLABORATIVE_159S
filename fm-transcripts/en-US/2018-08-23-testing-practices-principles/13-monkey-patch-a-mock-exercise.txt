[00:00:01]
>> Kent C. Dodds: So our next subject is mocks and test doubles, spys, whatever you want to call these things, a fake version of something. And so to teach you this, you're actually going to build your own or you're gonna work through. I'm creating a mark for a dependency in a test, okay?

[00:00:26]
So this is also going to be in the other directory in what's-a-mock, and in here. Let me really quick, I think I got a script for this, yeah. It's npm run test:mock,
>> Kent C. Dodds: And that should start your, just up in watch mode. If you're curious these scripts all exist in the package.json here.

[00:00:52]
So if you're like, what was that script again? Just looking look through here find the one that looks like the one we're working on. So it's test:mock.
>> Speaker 2: What directory do we need to put it in?
>> Kent C. Dodds: In this one, the directory should just be the root directory of the project.

[00:01:17]

>> Kent C. Dodds: So let me just intro you to this really quick. We've got a thumb war module. So this is, it takes a player one and player two, those are just accepted as strings. It goes through and calls this get winner function from and it keeps going until player one or player two win at least two and whoever gets that wins.

[00:01:45]
So we're going to make this act under the assumption that get winner is a module that Mix some requests to some unreliable service. Well it's realiable for production, but its test environment is uneliable or something. In addition, when you're unit testing, you don't want to be making any network requests anyway, so, if you're looking at the actual implementation, its just using that though, random.

[00:02:12]
But let's just pretend put our pretend hats on, that this is something really complicated we don't want to actually run in our tests. So this is what we're gonna be mocking, is this getwinner function from the utils module. You wanna be in todo, so yeah, if you look at 2 here we'll hit P and go thumb-wor.1,todo and you'll see that the test is still passing, the problem is that the assertion isn't very specific because it can't be because the winner is non deterministic and you can't encode that in your task because you can't really know.

[00:02:50]
All that we know is that the winner is going to be one of the two players And so what we want to do is we're gonna mock this so we can have a more specific assertion. And we're gonna itirate from a less optimum mocking strategy to a more optimum mocking strategy So I've got comments.

[00:03:12]
This is very similar to our building and testing framework that we did at the beginning. I've got comments in the code. I'll just let you go on it and we'll work through the, I'll work through the solutions. At the end, you can ask questions and everything.

