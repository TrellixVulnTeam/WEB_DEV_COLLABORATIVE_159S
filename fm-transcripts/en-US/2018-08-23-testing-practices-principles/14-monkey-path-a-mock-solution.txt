[00:00:00]
>> Kent Dodds: Let's make our assertion much more assertive, I guess. Does that make sense? Yeah, okay, so this is the monkey patching solution. We're basically going to take the utils and swap out the getWinner function before we call this thumbWar so that thumbWar is calling our version of that function.

[00:00:21]
So import * as utils from utils. And then here we'll say utills.getWinner equals a function that takes a player one and a player two, and of course always returns player two. Because, let's be honest, in a thumb war between me and Ken, it's gonna be me every time.

[00:00:46]
And actually I'm terrified that we'd actually do a thumb war in here, just destroy me. So you can't see that. Sorry, let's do the winner to be Kent C Dodds and save that, and our test should be passing. Let's just make sure that things can break, yeah. Cool.

[00:01:09]
So this is my key patching. One problem with this that I haven't done yet is that now we've changed this getWinner implementation for all of our tests. And so something that you need to do is keep the original getWinner utilities. So we'll say original getWinner equals utils at getWinner.

[00:01:30]
And then you'll want to restore that at the end of your test to make sure that any other tests that are using this module don't also blow up because they are relying on this actually running or whatever. Cool, so what questions do you have about this exercise, anything, nothing?

[00:01:56]
Okay, cool. Does anybody see potential problems with this approach?
>> Kent Dodds: So I'll give you a hint. So I've got an .eslintrc in here that disables a linting rule called import namespace. This is the eslinctrc plugin import. And what this rule actually ensures if I turn this back on, it'll do warn.

[00:02:27]
It ensures that you don't make changes to anything that you import, at least not on the namespace. So the reason for that is because it's actually when ES modules are actually implemented in node and if we're using native modules. This would actually not work. It might be a syntax error, but at least it would be a runtime error.

[00:02:55]
So this monkey patching business of modules is not an optimal solution. So we'll deal with that in a later exercise. The other problem with this is that let's say that if we call getWinner too many times in this function, or if we call it in the wrong way, then things can really blow up.

[00:03:18]
And so because as soon as you mock something or you create a fake version of something in your test, you're severing any confidence that you have in an integration between that fake thing and whatever you're testing. Because now, let's say that somewhere down the line here I'm gonna get rid of that annoying eslinctrc.

[00:03:46]
So let's say somewhere down the line our dependency or somebody who is writing this decides that they wanna maybe put a game or something like that, some additional options or something. If we're still using our mock, then actually our tests still pass, but the code is totally busted.

[00:04:04]
And so that's what I mean when I say by mocking something you're severing your ability to be confident about that thing because now you have no way of knowing if you're calling that thing properly. And so there are some things that you can do to overcome this. There's definitely a reason to mock things sometimes.

[00:04:22]
Sometimes you really can't charge somebody's credit card during your test. I don't have enough money in my account. So sorry, we can't run the test today. The CTO, he maxed out his credit card. Yeah, so that's not reasonable. So we do need to do some sort of mocking at some point, but if there is something we can do to sort of restore that confidence in some way, then that would be a really helpful thing.

[00:04:48]
That's actually called the contract testing to test that the integration is working properly. And we're not actually going to get into the contract testing, but we're gonna get somewhere a little bit closer to that with our next exercise.

