[00:00:00]
>> Let me introduce myself. My name is Vadim Karpusenko. I work at Microsoft. Yeah, I know [LAUGH] as Cloud Developer Advocate, and I'm specializing in Azure Machine Learning, Deep Learning, Artificial Intelligence, and High Performance Computing as well as Quantum Computing. So all of that is kinda part of my job or responsibilities.

[00:00:21]
Before working at Microsoft as Developer Relations, Advocate, I was a technical evangelist at Intel and basically was teaching high performance computing, parallel programming, code optimization, all of that. And my background, it's actually physics. [LAUGH] So that's why the quantum computing is coming from. I was doing molecular dynamic simulations, optimized it for large clusters and just basically was playing around with huge molecules.

[00:00:56]
But realize that our code is not super optimized for parallelism and kinda switch to figuring out how to optimize it more, well, better. And that basically lead the transition, my transition from physics to high performance computing and now machine learning. And the thing is it's interesting that in physics, a lot of problems now we're trying to approach it from a machine learning perspective and gonna figure out the way how we can apply machine learning to physics problems.

[00:01:29]
So even just, what, about a month ago, I was in Italy. We had an open hack with CERN researchers. Basically figuring out the way how you can predict the decay of particular particles, right, and recognize one event from another and kinda come up with a classifier, which can do it for you automatically.

[00:01:48]
Because right now, in physics, it's actually problem and takes a lot of compute resources, right? But with machine learning, you can switch to something maybe which have bigger footprint, memory footprint, but at the same time using less compute. Wow, fun stuff, fun stuff, so anyway, at the same time, although I'm having kinda this solid mathematics background, this course, I will try to base myself down and not to go too deep into maths.

[00:02:20]
And at least, that's my promise but I might get deviate a little bit deeper so please stop me and basically say yeah, you're going too deep. I will try to basically give the principle, explain the concepts without deviating too deep into mathematics. And I think it's still gonna be pretty useful because we'll show a lot of demos, practical demos.

[00:02:50]
So by the way, if you go to the top Vadikus/practicalDL, that's the URL for the course, right here, github.com/Vadikus/practicalDL. So the plan is to use Jupyter Notebooks, so Python is prerequisite for this course. I will be using Python mostly but if you are more familiar with the JavaScript, you can still use JavaScript with Keras and TensorFlow 2.0.

[00:03:22]
But you will have to go, it's on github, let me just find it. github, TensorFlow js examples, so on their TensorFlow, There is a tfjs-example and there are tons of examples which well, gonna be used in class as well but I will show how to do everything in Python for instance.

[00:03:52]
mnist datasets, that's the handwritten digits. And we should come up with a model which can recognize those digits. But well, I will be talking about this during the class. So all of those examples, if you, as I said more familiar with JavaScript, you can just grab files from here and still play with the models we will be discussing during the class.

[00:04:17]
A little bit about my setup, so I like to draw [LAUGH] and as you will see, I will be using my, Surface, one second, let me just log in quickly. All right, right here so if I just write something like this, you should see it on your screen as well.

[00:04:45]
I basically, yeah, will allow me to draw any diagrams and explain what I'm talking about, all of that. So that's gonna be one part of our setup. Also for the code itself, I will be using Jupyter notebooks. So if you just cloned the repository, you will see all of those ipynb files.

[00:05:14]
That's your interactive Python notebook files. And to start Jupyter notebook, first of all, of course, you need to install it. To install a Jupyter notebook, if you just look at the README file on the GitHub if you click on installation instructions, it should redirect you to jupyter home page.

[00:05:33]
And if you just follow those instructions, you can install it directly with pip, pip install. Jupyter does the commands or pip3 if you're using Python 3. Well, usually pip should be resulting into pip3. But if you're not familiar with the package management in Python, I heavily recommend to install Anaconda.

[00:05:58]
So conda will basically preserve the state and will not mess with other Python libraries in your system. And no matter if you own Linux on Mac or Windows, it will try to create this isolated environment for all the Python packages. And then inside this environment, you can install Jupyter.

[00:06:17]
I already have everything installed. So right now if I just type jupyter notebook and dot, it will start jupyter server in my folder where I have basically a GitHub repository cloned.

