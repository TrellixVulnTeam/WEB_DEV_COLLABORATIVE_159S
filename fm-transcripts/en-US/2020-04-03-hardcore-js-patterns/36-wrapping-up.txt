[00:00:00]
>> I hope this class covered a lot of ground for you to be able to dig deeper in, I hope it showed you where and how to use things. I hope you saw enough of it so that you can say okay i don't know it, okay it was so, so much but I have some exercises I can look up, I have examples I can look up and I can choose the right tool for the job and dig in when I need to.

[00:00:22]
That's that's kind of the purpose of this class. What's that up Mark?
>> It seems like a TypeScript would be really helpful here. Do you have any-
>> Yes.
>> That you could look up? Any resources?
>> Yeah so there's a few people out there, I could post their Twitter handles handles but they're pushing TypeScript so far that it's like making JavaScript feel like Scala.

[00:00:55]
And it's really impressive what they're doing with types, I was gonna start this class in TypeScript cuz it is a lot easier to just have the type checker say, you have a function inside of neither, and that's not what you said you would give me. But a lot of the type tricks that you have to do with TypeScript in particular, TypeScript doesn't love things like promise, holding an either holding a, you know a task.

[00:01:27]
It's not built for that and you have to do some some workarounds to get it to work, it's getting more feature rich but, it ends up being a lot of type trickery to get it to agree with these super nested types. So I highly recommend working with it, but if you're gonna go that far into types, consider your environment, consider who you're working with and think about, should I just use a typed functional language at this point.

[00:01:56]
Or should I use TypeScript because I'm in a setting where I need to use TypeScript rather.
>> You mean like Elm or pure pure script or reason?
>> Exactly, you could use Elm, you could use transcripts, use reason you can use, there's a dozen more of those [LAUGH] are out there.

[00:02:12]
There's compiled to, but the main thing is, if you're learning the paradigm itself, you see this stuff in every language and all the places. Elm is actively trying not to go here, but people are still doing this, [LAUGH] and the same thing, you might get tripped up in reason, they have a func type it comes from old Camel, it's a module function.

[00:02:36]
It's not the same definition as this functor, even though it's still rooted in some of the same terminology cool. So thank you all so much for for attending the class, let me know if there's any issues and stuff I can help post. [LAUGH] I'll post all the code up and fix any little bugs so it'll actually run when you download it.

[00:02:57]
[LAUGH] Thank you very much.
>> [APPLAUSE]

