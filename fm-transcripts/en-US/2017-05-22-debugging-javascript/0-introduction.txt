[00:00:00]
>> So, what I wanna talk about today is I wanna talk about how to squash JavaScript bugs. Because JavaScript can be hard, it can be quite painful to work with a lot of the time. There's so many different things that can go wrong. Your code itself layered on top of the asynchronous nature of JavaScript being pushed across networks we don't control and don't understand into browsers that might operate differently than the ones that we develop our site on.

[00:00:30]
But I don't want it to be painful. I want JavaScript, it starts out so wonderful and hypnotic and then as you're going it just seems to get worse and worse and you end up with this disaster of an application. Instead, it needs to be wonderful. It needs to have a great user experience.

[00:00:49]
So many of the web applications that we all interact with on a day-to-day basis are buggy and frustrating. And I don't want our applications to be that way. So here's what we're gonna talk about today. First, we're gonna start out with a little game, where we're gonna talk about JavaScript, and how weird and bizarre it can be.

[00:01:08]
And then we're gonna talk conceptually for a minute about how to fix bugs. What is the process that we need to go through in order to find, fix and prevent bugs from happening? And then we're gonna get into the real meat of this. And we're gonna talk about an application, we're going to debug it together.

[00:01:28]
I have a bunch of different classifications of bugs that we're gonna collaboratively go through. We're gonna do that again after lunch. We'll close out the day with some ideas on how to design our applications with debuggability in mind, so that when bugs inevitable happen, so that we can pull them back out of our code easily.

