[00:00:00]
>> Kyle Simpson: Let's double check our understanding. How is JavaScript's prototype chain not like traditional classical inheritance?
>> Speaker 2: [INAUDIBLE] The opposite direction.
>> Kyle Simpson: The arrows go right to left and bottom to top instead of the other way around, right? In other words instead of copying things down, we have live links up the prototype chain.

[00:00:26]

>> Kyle Simpson: What would you describe if somebody said hey what's this whole delegation thing about? How would you describe what it is? And how does it describe the object linking in JavaScript?
>> Kyle Simpson: I would say that the prototype chain is a delegation link from one object to another that allows those two objects to share context at call time.

[00:01:03]
AKA virtual composition.
>> Kyle Simpson: We already talked about this, one of the benefits of that delegation design pattern is independent testability. What do you think some of the trade-offs of prototype are? We already mentioned one of them earlier which was, we lost encapsulation, everything is in public now. Can you think of any other down sides to using prototypes and delegation?

[00:01:33]
I mean there's the obvious one, which is that the code is more complex, all right? There's no right or wrong answers here, it's just to probe you into thinking.

