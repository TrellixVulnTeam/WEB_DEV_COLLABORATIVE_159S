[00:00:00]
>> [MUSIC]

[00:00:04]
>> Justin Meyer: So jQuery has a bind() and unbind() method that lets you, this is not right. You have to pass it a function, but the same function in memory. jQuery has a bind and unbind method that lets you listen to a click event or any type of event on an element and also unbind stops listening.

[00:00:28]
So I'm implement that. It's pretty easy.
>> Justin Meyer: So If you guys can walk me through it, I'm gonna do the each which we all know, jQuery's always doing.
>> Justin Meyer: And I'm gonna get the index and the elements.
>> Justin Meyer: So, what do I need to do for bind?
>> Justin Meyer: Who's going to be the new Chris?

[00:01:04]
Who wants it, the title?
>> Student 3: You need to add an addendum.
>> Justin Meyer: Yes.
>> Student: Question was, what's the third parameter? And even-
>> Justin Meyer: Yeah, we will talk about the difference in capture in bubble does what that third parameter does in a second. For now I'm not going talk about.

[00:01:25]
I will be there a second, so I'm gonna register handler. And I'm going to type put false in because that's what jQuery always has its false there. And for unbind it's going to look the exact same. I'm just going to write remove event listener and that's it. Go through each element bind on it go through every element again unbind that.

[00:01:55]
Now, I should say one important thing here. If you guys do feel confident, I implemented jQuery after this. You don't need jQuery you can just do the DOM, understand that jQuery does a lot of there's a lot more going on in jQuery than what I'm showing here for this kind of stuff.

[00:02:13]

>> Justin Meyer: All right, so.
>> Justin Meyer: So event handlers are always called back with an event object, all right? That's this ev right here. So whenever I click on something the function handler is going to call back with a single argument. And that's gonna be have some a lot of data on it.

[00:02:36]
It's gonna have stuff like what is the current element who's events are being dispatched. What is the target like what element was actually clicked on, what type of event was triggered that kind of stuff a lot of fun stuff. And even some methods that allow you to control how that element moves around cuz when an element is clicked, it actually like if you click on an anchor that element will actually fire off of vents on the body, anything in between the bot like the anchor element and the HTML element and also even fire off a click on the window so you can control how that flows.

[00:03:15]
And we'll get into that in a second.
>> Student: There's a couple of questions that are coming up here. Is jQuery also taking anonymous functions? Cuz if you register something anonymously, you can unbind it?
>> Justin Meyer: So jQuery has some nice ways of even if you register an element, that you can, without keeping a reference to it, you can unbind it.

[00:03:40]
One way is to, if I did a bind on a ul, I could just call unbind and that will unbind all event handlers jQuery has ever done on that element. So, yes, you should always I mean in general it's good to keep your hammers around so you can unbind the individual yourself.

[00:04:03]
But jQuery does have things that make it easier to deal with.
>> Student: The next question was does JavaScript support name spacing on events like jQuery?
>> Justin Meyer: No, it's does not, okay.
>> Justin Meyer: Okay, so let me quickly go through the different types of events.
>> Justin Meyer: You can have in Chrome.

[00:04:39]
So there's a bunch of different events that you can listen to.
>> Justin Meyer: This page has a lot of them. I'll try to put this up. We just kind of cleaned it up. We'll try to put this up online at some point. So these are different types of events.

[00:04:57]
You can listen to a click event and that happens when someone clicks on an element and this is the data that that click event comes with. And will go through some of these Properties were just if you do want to explore this is a good page to do that.

[00:05:12]
A double click you can listen to when someone double clicks context menu when the right menu comes out, mouse down as someone hits the down, mouse up when someone releases the mouse. Mouseout happens when someone comes into over an element and then leaves it. So you can see here I'm leaving, and mouseover comes when I come from outside into the element.

[00:05:38]
Mousemove is someone's moving, you can see that offset x and offset y changing like crazy with every mouse move. This is good for drag and drop. Mouseenter, I'll explain the difference mouseenter and mouseover and mouseleave and mouseout in a second but these are kind of similar. Mouseenter, mouseleave and mouseover, mouseout but they do have an important difference.

[00:06:00]
In general you should always use mouseenter, mouseleave. So these are the events that deal with the mouse moving. But there's also a bunch of other events that deal with HTML events like when someone selects text input on it. So I'm not gonna go through all of these events.

[00:06:20]
I will put this up so you can explore the big ones I will talk about are the change event. This happens when someone changes a form value.
>> Justin Meyer: And it loses focus if it's a normal text field. Submit happens when someone submits, clicks a button, or hits enter key and input that will submit a form.

[00:06:43]
Focus and blur, as an element receives focus or an element loses focus?
>> Student 2: What about normalizing between mouse events and and touch events? Is there a good way to do that?
>> Justin Meyer: There are a bunch of libraries that do it. I've like, a lot of people use jQuery mobile.

[00:07:07]
I've not actually had the pleasure of using that. I've done it myself and most of the projects I've worked on for mobile. But if other people have suggestions on good ones.
>> Student 4: jQuery is actually doing an event normalization tried on. It's also UI layout but if you're talking about-

[00:07:24]

>> Justin Meyer: Who said tap-
>> Student: That way you can have like a tap that handles clicks, and touches, and taps, also. There is a lot of good stuff, I know caress.js is out there, but there's just a ton of different libraries.
>> Student 4: Use FastClick, I think.
>> Justin Meyer: That does it on tab, yeah, there's a bunch, but, yeah.

[00:07:45]
So, key events, you can also listen to the keyboard. So there's a key down event whenever like the mouse on a down or that the mouse the key is on a down. And a press if you're like at a Windows machine and you hold a key. It'll keep reading keypresses, but in Mac by default.

[00:08:09]
It's only like as the key is pretty much being written out. The input event is actually very similar to that. The key press on Mac but these behave differently in Windows I think, I should have to remember that. Don't take that literal I have to remember what the total difference.

[00:08:30]
I think you can cancel input. Keyup happens when you when the key like when the person releases the key. Ready events happens when the whole body hit all the HTML has been loaded and is ready for you to start manipulating the HTML. And then finally the difference between mouseenter and mouseout.

[00:08:53]
Unless on the left I'm doing mouseenter, mouseleave which is what you should be using and on the right I'm doing mouseover, mouseout. Look what happens when I do mouseover and mouseout. See there's a mouseover event but there's also a mouseout event on the blue when I go from here to an inner element which is almost what you never want.

[00:09:17]
If you're trying to do like a mouse over effect or something like that, you typically don't want the mouse out when someone goes to an inner element. Mouseenter and mouseleave, they do what you expect as I go to an inner element it doesn't trigger a mouseleave until I actually leave the element.

[00:09:38]
So use mouseenter, mouseleave not the mouseout, mouse over, so those the events.
>> Student: This page is actually available in your demos. jQuery is page for that mouseover actually has a I think a bugged version of the same kinda demos, so be careful on the counter cuz they have something a little different on the demo page.

[00:10:03]

>> Justin Meyer: Now how many of you have ever wanted to do a form that uses Ajax to to post to a server, but doesn't actually refresh the page, probably a lot of you. Have you ever had it where like some hit Submit but it's still the whole page goes is submitted and goes to another page.

[00:10:22]
Well that's because the submit event of a form has a default behavior. As a default behavior of getting the forms data and posting that to a server and going to a new page just like when you click the link that it has a default behavior of going to a new page.

[00:10:42]
You can prevent these default behaviors within an element with prevent default. So this is why if you ever wanna prevent like allow someone to click on a link but actually not take them to that page or allow someone to submit a form but not actually go to another page, you'll listen to the submit event and you'll call event prevent default.

[00:11:00]
There's a bunch of default actions this page lists them. And prevent default is what prevents all of them for particular event. So I think I have an example of this. So you would in your event handler call event prevent default. And that's basically and you would register this event handler, simple.

[00:11:24]

>> Justin Meyer: So, let's talk about the event data that comes, I'm not gonna go into it in detail but like we showed in this every event has a lot of data that you can use like if I held the shift key while I did a mouseup, shift key how I just hit 1 million things should be true.

[00:11:56]

>> Justin Meyer: The most important ones are the type of the event. This will be basically the name you put here. The target, this is the actual deepest event that the, or deepest element that the event happened on. So if you have a DOM and you have a link way deeply, all right I guess from your guys, it's way deeply nested.

[00:12:17]
That's you actually clicked on that's gonna be the target, but that event is gonna bubble up and whatever elements event handlers are being dispatched that's the current target, we'll see that in a second. So there's also for mouse events. This is kinda I'm gonna skip the events cuz this is boring.

[00:12:38]
Let's talk to the good thing. Let's really understand how event propagation works in the browser

