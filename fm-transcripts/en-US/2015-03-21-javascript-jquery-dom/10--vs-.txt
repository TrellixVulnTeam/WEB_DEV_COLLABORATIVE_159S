[00:00:00]
>> [MUSIC]

[00:00:04]
>> Alexis Abril: You've probably seen, I know Brian Lou has that awesome blog post or video out there with all the crazy things that's wrong with JavaScript, and most of this is in there. I like that blog post, it's really humorous. But there's a lot of weird things that happen when you use double equals.

[00:00:22]
We've all observed it, at this point, I assume everybody's observed something, that's not what I would expect. But it's there and it's easy, so sometimes we use it. Here's what's going on, 21, the number, == the string, 21. What do you guys think, true false? What do you think this is gonna return?

[00:00:42]

>> Speaker 2: True.
>> Alexis Abril: True? I would kind of expect this to be true, like okay, 21, string 21. They're different types, but I get it. Stuff behind the scenes is doing smart things. It knows what we're talking about. Okay, undefined == null. Now remember, these are primitive types. Undefined is a primitive type, it's a undefined pointer, unreferenced pointer.

[00:01:07]
Null is an actual memory address, 0x0, it's the null pointer in memory. If you say undefined == null, what do you guys think, true or false?
>> Speaker 2: True.
>> Speaker 3: True.
>> Speaker 4: False.
>> Alexis Abril: You think true? A couple, one false, any other falses? I would think false, I would expect this to be false.

[00:01:25]
Just looking at it, newcomer to language, undefined == null. They're two primitive types, I would expect it to be false. It is true, this is strange. Don't worry, we're gonna come back to why this is the way it is. Triple equals with two primitives, now, again, a newcomer to the language, I would say, I would expect this to be the same as before.

[00:01:48]
What do you guys think, true or false?
>> Speaker 2: False.
>> Alexis Abril: Okay, a couple false. This is the weird part cuz looking at this, if the roles were reversed here, I would look at them like, it's gotta be true, right? The previous one is true, this one is gonna be false, just to make things completely confusing.

[00:02:09]
Don't give up on the language yet, we're gonna make it through this chart, and we're gonna show you why. Oops, didn't mean to show you the answer, number [LAUGH] equals number, we assume that would be true, I would hope that's true. Here's an interesting one, empty object equals empty object.

[00:02:23]
Triple equals, what do you guys think, true or false?
>> Speaker 2: True.
>> Alexis Abril: True?
>> Speaker 3: False.
>> Alexis Abril: False.
>> Speaker 4: False.
>> Alexis Abril: False, true? The room is divided. I would expect this, well, this one is different. I don't know, this one is unique, if you've come from another dynamic language, I would expect this to be false.

[00:02:46]
And it is, we're gonna talk about why. Those that I said true, probably assuming like the properties are identical. That's basically the logic that went through our heads. I'm gonna show you what this is actually doing. Not a number is triple equals to not a number. What do you guys think, true or false?

[00:03:08]
False.
>> Speaker 2: I'm gonna say it's true.
>> Alexis Abril: True.
>> Speaker 3: It's true.
>> Alexis Abril: True. The room is divided once again. It is false. How many people have completely just, I give up, I'm never gonna put another if statement to my code again. Now this is crazy. [LAUGH] This last one, true double equals an object with a value of function that returns a string, 1.

[00:03:39]
What do you guys think? I can tell you right now,
>> Speaker 2: [LAUGH]
>> Alexis Abril: False, I expect that to be false. That's crazy, that's-
>> Speaker 2: True.
>> Alexis Abril: One true?
>> Alexis Abril: True, false, what do you guys think? False, true, split? Split down the middle again, I like this room. This one's gonna be true, [LAUGH] which is insane, right?

[00:04:00]
I would never expect, if you had if true, and some crazy object. Let's say you're passing in your function, accepting some kind of object as a parameter, and you know you're like I need to make sure the data is what I expect or throw some error. And then right at the start of my function, I say if true equals whatever the user passed in, and then some malicious user says, I'm gonna pass in an object with a value of function that returns this.

[00:04:27]
And I'm gonna pass your condition. That's crazy. Well let's talk about how this is set up in memory, and then I'm gonna walk you guys through what this actual comparison is doing.

